{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Blind75+ Leetcode Solutions \u7f16\u7a0b\u7ade\u8d5b\uff08competitive programming\uff09 \u77e5\u8bc6\u6574\u5408\u7ad9\u70b9 About Interview \u00b6 Expectations Clearly defines the problem first. Can see hidden problems. Looks to multiple sources for information and clues. Asks the right questions to accurately analyze situations. Acquires data from multiple and diverse sources when solving problems. Uncovers root causes to difficult problems. Red Flags Misses the complexity of issues and force fits solutions. Doesn\u2019t gather sufficient information to assess situations completely. Relies solely on intuition, even when contrary information exists Is caught off guard when problems surface without an obvious solution.","title":"Home"},{"location":"#introduction","text":"Blind75+ Leetcode Solutions \u7f16\u7a0b\u7ade\u8d5b\uff08competitive programming\uff09 \u77e5\u8bc6\u6574\u5408\u7ad9\u70b9","title":"Introduction"},{"location":"#about-interview","text":"Expectations Clearly defines the problem first. Can see hidden problems. Looks to multiple sources for information and clues. Asks the right questions to accurately analyze situations. Acquires data from multiple and diverse sources when solving problems. Uncovers root causes to difficult problems. Red Flags Misses the complexity of issues and force fits solutions. Doesn\u2019t gather sufficient information to assess situations completely. Relies solely on intuition, even when contrary information exists Is caught off guard when problems surface without an obvious solution.","title":"About Interview"},{"location":"00.LeetCode-Weekly-Contest/","text":"AC 4 in 40mins \u00b6 \u6b8b\u9177\u5237\u9898\u7fa4 LeetCode Weekly Contest Score Board (the most recent 52 weeks)","title":"AC 4 in 40mins"},{"location":"00.LeetCode-Weekly-Contest/#ac-4-in-40mins","text":"\u6b8b\u9177\u5237\u9898\u7fa4 LeetCode Weekly Contest Score Board (the most recent 52 weeks)","title":"AC 4 in 40mins"},{"location":"01.Arrays-and-Hashing/%21Array%26Matrix/","text":"Array \u00b6 Matrix \u00b6 4 Directions 8 Directions Depth First Search & Breadth First Search in Matrix \u00b6 DFS vs BFS: For example, 1293. Shortest Path in a Grid with Obstacles Elimination BFS is like ripples. The advantage of BFS is that searches that scale out layer by layer can encounter obstacles earlier and return early. However, DFS requires memory to optimize time complexity. 200. Number of Islands DFS is implemented recursively 1 2 3 4 5 6 def dfs ( self , grid , r , c ): grid [ r ][ c ] = 0 nr , nc = len ( grid ), len ( grid [ 0 ]) for x , y in [( r - 1 , c ), ( r + 1 , c ), ( r , c - 1 ), ( r , c + 1 )]: if 0 <= x < nr and 0 <= y < nc and grid [ x ][ y ] == \"1\" : # Some conditions are met self . dfs ( grid , x , y ) BFS is implemented with a queue, first in first out 1 2 3 4 5 6 7 8 9 10 11 12 neighbors = collections . deque ([( r , c )]) while neighbors : row , col = neighbors . popleft () for x , y in [ ( row - 1 , col ), ( row + 1 , col ), ( row , col - 1 ), ( row , col + 1 ), ]: if 0 <= x < nr and 0 <= y < nc and grid [ x ][ y ] == \"1\" : neighbors . append (( x , y )) grid [ x ][ y ] = \"0\" Ref. \u00b6 https://www.geeksforgeeks.org/difference-between-bfs-and-dfs/","title":"!Array&Matrix"},{"location":"01.Arrays-and-Hashing/%21Array%26Matrix/#array","text":"","title":"Array"},{"location":"01.Arrays-and-Hashing/%21Array%26Matrix/#matrix","text":"4 Directions 8 Directions","title":"Matrix"},{"location":"01.Arrays-and-Hashing/%21Array%26Matrix/#depth-first-search-breadth-first-search-in-matrix","text":"DFS vs BFS: For example, 1293. Shortest Path in a Grid with Obstacles Elimination BFS is like ripples. The advantage of BFS is that searches that scale out layer by layer can encounter obstacles earlier and return early. However, DFS requires memory to optimize time complexity. 200. Number of Islands DFS is implemented recursively 1 2 3 4 5 6 def dfs ( self , grid , r , c ): grid [ r ][ c ] = 0 nr , nc = len ( grid ), len ( grid [ 0 ]) for x , y in [( r - 1 , c ), ( r + 1 , c ), ( r , c - 1 ), ( r , c + 1 )]: if 0 <= x < nr and 0 <= y < nc and grid [ x ][ y ] == \"1\" : # Some conditions are met self . dfs ( grid , x , y ) BFS is implemented with a queue, first in first out 1 2 3 4 5 6 7 8 9 10 11 12 neighbors = collections . deque ([( r , c )]) while neighbors : row , col = neighbors . popleft () for x , y in [ ( row - 1 , col ), ( row + 1 , col ), ( row , col - 1 ), ( row , col + 1 ), ]: if 0 <= x < nr and 0 <= y < nc and grid [ x ][ y ] == \"1\" : neighbors . append (( x , y )) grid [ x ][ y ] = \"0\"","title":"Depth First Search &amp; Breadth First Search in Matrix"},{"location":"01.Arrays-and-Hashing/%21Array%26Matrix/#ref","text":"https://www.geeksforgeeks.org/difference-between-bfs-and-dfs/","title":"Ref."},{"location":"01.Arrays-and-Hashing/127.word-ladder/","text":"","title":"127.word ladder"},{"location":"01.Arrays-and-Hashing/128.longest-consecutive-sequence/","text":"","title":"128.longest consecutive sequence"},{"location":"01.Arrays-and-Hashing/1730.shortest-path-to-get-food/","text":"","title":"1730.shortest path to get food"},{"location":"01.Arrays-and-Hashing/217.contains-duplicate/","text":"217. Contains Duplicate 1 2 3 class Solution : def containsDuplicate ( self , nums : List [ int ]) -> bool : return len ( nums ) != len ( set ( nums ))","title":"217.contains duplicate"},{"location":"01.Arrays-and-Hashing/238.product-of-array-except-self/","text":"238. Product of Array Except Self Find the prefix and suffix. Because the output can not be counted into the space complexity, it can be optimized into a prefix and placed in the output, and the suffix can be dynamically calculated. Time Complexity: O(N) Space Complexity: O(1) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def productExceptSelf ( self , nums : List [ int ]) -> List [ int ]: n = len ( nums ) res = [ 0 ] * n res [ 0 ] = 1 # prefix product for i in range ( 1 , n ): res [ i ] = nums [ i - 1 ] * res [ i - 1 ] suffix = 1 for i in reversed ( range ( n )): res [ i ] = res [ i ] * suffix # calculate suffix dynamically suffix *= nums [ i ] return res","title":"238.product of array except self"},{"location":"01.Arrays-and-Hashing/271.encode-and-decode-strings/","text":"271. Encode and Decode Strings use a non-ASCII delimiter \u00b6 There are 256 ASCII characters, use non-ASCII characters as split. Time Complexity: O(N) Space Complexity: encode O(1) , decode O(N) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from typing import List class Codec : def encode ( self , strs : List [ str ]) -> str : \"\"\"Encodes a list of strings to a single string.\"\"\" if len ( strs ) == 0 : return chr ( 258 ) return chr ( 257 ) . join ( strs ) def decode ( self , s : str ) -> List [ str ]: \"\"\"Decodes a single string to a list of strings.\"\"\" if s == chr ( 258 ): return [] return s . split ( chr ( 257 )) # Your Codec object will be instantiated and called as such: # codec = Codec() # codec.decode(codec.encode(strs)) chunked encoding \u00b6 The first 4 bits record the length of each array 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 from typing import List class Codec : def encode ( self , strs : List [ str ]) -> str : \"\"\"Encodes a list of strings to a single string.\"\"\" list_ = [] for i in strs : list_ . append ( \" {:4} \" . format ( len ( i )) + i ) return \"\" . join ( list_ ) def decode ( self , s : str ) -> List [ str ]: \"\"\"Decodes a single string to a list of strings.\"\"\" index = 0 list_ = [] while index <= len ( s ) - 2 : char_long = int ( s [ index : index + 4 ]) list_ . append ( s [ index + 4 : index + char_long + 4 ]) index += 4 + char_long return list_ # Your Codec object will be instantiated and called as such: # codec = Codec() # codec.decode(codec.encode(strs)) codec = Codec () strs = [ \"qqqqwe\" , \"rasdfzxcvt\" ] print ( codec . encode ( strs )) https://leetcode.cn/problems/encode-and-decode-strings/solution/python3-ji-lu-fa-by-qing-bi-ning-shuang-z6mi/","title":"271.encode and decode strings"},{"location":"01.Arrays-and-Hashing/271.encode-and-decode-strings/#use-a-non-ascii-delimiter","text":"There are 256 ASCII characters, use non-ASCII characters as split. Time Complexity: O(N) Space Complexity: encode O(1) , decode O(N) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from typing import List class Codec : def encode ( self , strs : List [ str ]) -> str : \"\"\"Encodes a list of strings to a single string.\"\"\" if len ( strs ) == 0 : return chr ( 258 ) return chr ( 257 ) . join ( strs ) def decode ( self , s : str ) -> List [ str ]: \"\"\"Decodes a single string to a list of strings.\"\"\" if s == chr ( 258 ): return [] return s . split ( chr ( 257 )) # Your Codec object will be instantiated and called as such: # codec = Codec() # codec.decode(codec.encode(strs))","title":"use a non-ASCII delimiter"},{"location":"01.Arrays-and-Hashing/271.encode-and-decode-strings/#chunked-encoding","text":"The first 4 bits record the length of each array 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 from typing import List class Codec : def encode ( self , strs : List [ str ]) -> str : \"\"\"Encodes a list of strings to a single string.\"\"\" list_ = [] for i in strs : list_ . append ( \" {:4} \" . format ( len ( i )) + i ) return \"\" . join ( list_ ) def decode ( self , s : str ) -> List [ str ]: \"\"\"Decodes a single string to a list of strings.\"\"\" index = 0 list_ = [] while index <= len ( s ) - 2 : char_long = int ( s [ index : index + 4 ]) list_ . append ( s [ index + 4 : index + char_long + 4 ]) index += 4 + char_long return list_ # Your Codec object will be instantiated and called as such: # codec = Codec() # codec.decode(codec.encode(strs)) codec = Codec () strs = [ \"qqqqwe\" , \"rasdfzxcvt\" ] print ( codec . encode ( strs )) https://leetcode.cn/problems/encode-and-decode-strings/solution/python3-ji-lu-fa-by-qing-bi-ning-shuang-z6mi/","title":"chunked encoding"},{"location":"01.Arrays-and-Hashing/347.top-k-frequent-elements/","text":"347. Top K Frequent Elements return the k most frequent elements heap \u00b6 time complexity O(nlogk) , n is len(nums), heap size is k , per heap operation O(logk) space complexity O(n) , more accurate is O(n) hashmap + O(k) heap size Python defaults to a min heap, so there is a negative sign. Swap k, v to return the result 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from typing import List import heapq from collections import Counter class Solution : def topKFrequent ( self , nums : List [ int ], k : int ) -> List [ int ]: res = [] cnt = Counter ( nums ) # {num, freq} max_heap = [( - v , k ) for k , v in cnt . items ()] heapq . heapify ( max_heap ) for _ in range ( max_heap ): res . append ( heapq . heappop ( max_heap )[ 1 ]) return res bucket sort \u00b6 tc O(n) , sc O(n) 1 2 3 4 5 6 7 8 9 10 11 12 from itertools import chain from typing import List from collections import Counter def topKFrequent ( nums : List [ int ], k : int ) -> List [ int ]: bucket = [[] for _ in range ( len ( nums ) + 1 )] Count = Counter ( nums ) . items () for num , freq in Count : bucket [ freq ] . append ( num ) flat_list = list ( chain ( * bucket )) # * means unpacks return flat_list [:: - 1 ][: k ] Ref. \u00b6 https://docs.python.org/3/library/itertools.html#itertools.chain Used for treating consecutive sequences as a single sequence chain('ABC', 'DEF') --> A B C D E F https://github.com/neetcode-gh/leetcode/blob/main/347-Top-k-frequent-elements.py https://leetcode.com/problems/top-k-frequent-elements/discuss/740374/Python-5-lines-O(n)-buckets-solution-explained","title":"347.top k frequent elements"},{"location":"01.Arrays-and-Hashing/347.top-k-frequent-elements/#heap","text":"time complexity O(nlogk) , n is len(nums), heap size is k , per heap operation O(logk) space complexity O(n) , more accurate is O(n) hashmap + O(k) heap size Python defaults to a min heap, so there is a negative sign. Swap k, v to return the result 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from typing import List import heapq from collections import Counter class Solution : def topKFrequent ( self , nums : List [ int ], k : int ) -> List [ int ]: res = [] cnt = Counter ( nums ) # {num, freq} max_heap = [( - v , k ) for k , v in cnt . items ()] heapq . heapify ( max_heap ) for _ in range ( max_heap ): res . append ( heapq . heappop ( max_heap )[ 1 ]) return res","title":"heap"},{"location":"01.Arrays-and-Hashing/347.top-k-frequent-elements/#bucket-sort","text":"tc O(n) , sc O(n) 1 2 3 4 5 6 7 8 9 10 11 12 from itertools import chain from typing import List from collections import Counter def topKFrequent ( nums : List [ int ], k : int ) -> List [ int ]: bucket = [[] for _ in range ( len ( nums ) + 1 )] Count = Counter ( nums ) . items () for num , freq in Count : bucket [ freq ] . append ( num ) flat_list = list ( chain ( * bucket )) # * means unpacks return flat_list [:: - 1 ][: k ]","title":"bucket sort"},{"location":"01.Arrays-and-Hashing/347.top-k-frequent-elements/#ref","text":"https://docs.python.org/3/library/itertools.html#itertools.chain Used for treating consecutive sequences as a single sequence chain('ABC', 'DEF') --> A B C D E F https://github.com/neetcode-gh/leetcode/blob/main/347-Top-k-frequent-elements.py https://leetcode.com/problems/top-k-frequent-elements/discuss/740374/Python-5-lines-O(n)-buckets-solution-explained","title":"Ref."},{"location":"01.Arrays-and-Hashing/49.group-anagrams/","text":"49. Group Anagrams An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. time complexity O(n(k+|\u03a3|)) , n is len(strs), k is longest str in strs, \u03a3 is a character set, this problem is 26 lowercase letters, space complexity O(n(k+|\u03a3|)) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from typing import List from collections import defaultdict class Solution : def groupAnagrams ( self , strs : List [ str ]) -> List [ List [ str ]]: # counter str in strs, use count as hash key ans = defaultdict ( list ) for s in strs : count = [ 0 ] * 26 for c in s : count [ ord [ c ] - ord ( \"a\" )] += 1 ans [ tuple ( count )] . append ( s ) return ans . values () Ref. \u00b6 https://github.com/neetcode-gh/leetcode/blob/main/49-Group-Anagrams.py","title":"49.group anagrams"},{"location":"01.Arrays-and-Hashing/49.group-anagrams/#ref","text":"https://github.com/neetcode-gh/leetcode/blob/main/49-Group-Anagrams.py","title":"Ref."},{"location":"01.Arrays-and-Hashing/705.design-hashset/","text":"","title":"705.design hashset"},{"location":"01.Arrays-and-Hashing/706.design-hashmap/","text":"Ref. \u00b6 Design a hash map","title":"706.design hashmap"},{"location":"01.Arrays-and-Hashing/706.design-hashmap/#ref","text":"Design a hash map","title":"Ref."},{"location":"01.Arrays-and-Hashing/912.sort-an-array/","text":"912. Sort an Array what is quicksort \u00b6 Quicksort is an improvement on bubble sort \u5feb\u901f\u6392\u5e8f\u662f\u4e8c\u53c9\u67e5\u627e\u6811\uff08\u4e8c\u53c9\u641c\u7d22\u6811\uff09\u7684\u4e00\u4e2a\u7a7a\u95f4\u6700\u4f18\u5316\u7248\u672c \u5feb\u901f\u6392\u5e8f\u5c31\u662f\u4e2a\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\uff0c\u5f52\u5e76\u6392\u5e8f\u5c31\u662f\u4e2a\u4e8c\u53c9\u6811\u7684\u540e\u7eed\u904d\u5386 \u9009\u4e00\u4e2a\u57fa\u51c6\u6570\uff0c\u901a\u5e38\u4e3a\u6570\u7ec4\u7b2c\u4e00\u4e2a pivot = nums[0] \u9009\u53d6\u7b2c\u4e00\u4e2a\u6570\u548c\u6700\u540e\u4e00\u4e2a\u6570\uff0c\u8bbe\u7f6e\u5934\u90e8\u54e8\u5175 left \u548c\u5c3e\u90e8\u54e8\u5175 right \u5148\u4ece\u540e\u8fb9\u5f00\u59cb\uff0c\u81ea\u540e\u5411\u524d\u626b\u63cf right-- \uff0c\u5c3e\u90e8\u7684\u54e8\u5175\u5982\u53d1\u73b0\u6709 \u6bd4\u57fa\u51c6\u6570\u5c0f \u7684\u6570\uff0c\u548c left \u4ea4\u6362 \u518d\u4ece\u524d\u8fb9\u5f00\u59cb\uff0c\u81ea\u524d\u5411\u540e\u626b\u63cf left++ \uff0c\u5934\u90e8\u7684\u54e8\u5175\u5982\u53d1\u73b0\u6709 \u6bd4\u57fa\u51c6\u6570\u5927 \u7684\u6570\uff0c\u548c right \u4ea4\u6362 PS: \u4ee5\u4e0a\u64cd\u4f5c\u4e5f\u53ef\u4ee5\u8054\u60f3\u6210\u6316\u51fa\u4e00\u4e2a\u5751\uff0c\u7136\u540e\u6309\u7167 3 \u548c 4 \u7684\u89c4\u5219\u53bb\u586b\u5751\uff0c\u6700\u540e\u5f53\u54e8\u5175\u76f8\u9047\u65f6\uff0c\u628a\u6700\u5f00\u59cb\u6316\u51fa\u6765\u7684\u57fa\u51c6\u586b\u5165 \u91cd\u590d 3 \u548c 4\uff0c\u76f4\u5230\u4e24\u4e2a\u54e8\u5175\u76f8\u9047\uff0c\u4ea4\u6362\u57fa\u51c6\u6570\u548c\u5c3e\u54e8\u5175 \u6b64\u65f6\u4e00\u5f00\u59cb\u9009\u4e2d\u7684 pivot \u5df2\u7ecf\u5f52\u4f4d\uff0c\u9012\u5f52\u5730\u5bf9 pivot \u5de6\u53f3\u4e24\u4fa7\u5b50\u5e8f\u5217\u8fdb\u884c\u6392\u5e8f Other Approachs: Less code, the tradeoff in the code is it uses a bit of extra space. https://leetcode.com/problems/sort-an-array/discuss/277127/7-line-quicksort-to-write-in-interviews-(Python) ans \u00b6 Naive Quick Sort: best O(nlogn), avg O(nlogn), worst O(n^2). 3-way Radix Quicksort Time Complexity: best O(n), avg O(nlogn), worst O(2^K * N). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import random from typing import List class Solution : def sortArray ( self , nums : List [ int ]) -> List [ int ]: self . quickSort ( nums , 0 , len ( nums ) - 1 ) return nums def quickSort ( self , nums , l , r ): if l >= r : return random_index = random . randint ( l , r ) pivot = nums [ random_index ] nums [ l ], nums [ random_index ] = nums [ random_index ], nums [ l ] i = l + 1 # current operation j = l # first smaller to pivot, swapped, left to right k = r + 1 # first larger than pivot, swapped, right to left while i < k : # find num < pivot, swap with leftmost(hasn't been swapped yet) if nums [ i ] < pivot : nums [ i ], nums [ j + 1 ] = nums [ j + 1 ], nums [ i ] j += 1 i += 1 # find num > pivot, swap with rightmost(hasn't been swapped yet) elif nums [ i ] > pivot : nums [ i ], nums [ k - 1 ] = nums [ k - 1 ], nums [ i ] k -= 1 # if num = pivot, skip else : i += 1 nums [ l ], nums [ j ] = nums [ j ], nums [ l ] self . quickSort ( nums , l , j - 1 ) self . quickSort ( nums , k , r ) nums = [ 2 , 8 , 7 , 1 , 3 , 5 , 6 , 4 , 5 , 5 , 6 , 4 ] s = Solution () print ( s . sortArray ( nums ))","title":"912.sort an array"},{"location":"01.Arrays-and-Hashing/912.sort-an-array/#what-is-quicksort","text":"Quicksort is an improvement on bubble sort \u5feb\u901f\u6392\u5e8f\u662f\u4e8c\u53c9\u67e5\u627e\u6811\uff08\u4e8c\u53c9\u641c\u7d22\u6811\uff09\u7684\u4e00\u4e2a\u7a7a\u95f4\u6700\u4f18\u5316\u7248\u672c \u5feb\u901f\u6392\u5e8f\u5c31\u662f\u4e2a\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\uff0c\u5f52\u5e76\u6392\u5e8f\u5c31\u662f\u4e2a\u4e8c\u53c9\u6811\u7684\u540e\u7eed\u904d\u5386 \u9009\u4e00\u4e2a\u57fa\u51c6\u6570\uff0c\u901a\u5e38\u4e3a\u6570\u7ec4\u7b2c\u4e00\u4e2a pivot = nums[0] \u9009\u53d6\u7b2c\u4e00\u4e2a\u6570\u548c\u6700\u540e\u4e00\u4e2a\u6570\uff0c\u8bbe\u7f6e\u5934\u90e8\u54e8\u5175 left \u548c\u5c3e\u90e8\u54e8\u5175 right \u5148\u4ece\u540e\u8fb9\u5f00\u59cb\uff0c\u81ea\u540e\u5411\u524d\u626b\u63cf right-- \uff0c\u5c3e\u90e8\u7684\u54e8\u5175\u5982\u53d1\u73b0\u6709 \u6bd4\u57fa\u51c6\u6570\u5c0f \u7684\u6570\uff0c\u548c left \u4ea4\u6362 \u518d\u4ece\u524d\u8fb9\u5f00\u59cb\uff0c\u81ea\u524d\u5411\u540e\u626b\u63cf left++ \uff0c\u5934\u90e8\u7684\u54e8\u5175\u5982\u53d1\u73b0\u6709 \u6bd4\u57fa\u51c6\u6570\u5927 \u7684\u6570\uff0c\u548c right \u4ea4\u6362 PS: \u4ee5\u4e0a\u64cd\u4f5c\u4e5f\u53ef\u4ee5\u8054\u60f3\u6210\u6316\u51fa\u4e00\u4e2a\u5751\uff0c\u7136\u540e\u6309\u7167 3 \u548c 4 \u7684\u89c4\u5219\u53bb\u586b\u5751\uff0c\u6700\u540e\u5f53\u54e8\u5175\u76f8\u9047\u65f6\uff0c\u628a\u6700\u5f00\u59cb\u6316\u51fa\u6765\u7684\u57fa\u51c6\u586b\u5165 \u91cd\u590d 3 \u548c 4\uff0c\u76f4\u5230\u4e24\u4e2a\u54e8\u5175\u76f8\u9047\uff0c\u4ea4\u6362\u57fa\u51c6\u6570\u548c\u5c3e\u54e8\u5175 \u6b64\u65f6\u4e00\u5f00\u59cb\u9009\u4e2d\u7684 pivot \u5df2\u7ecf\u5f52\u4f4d\uff0c\u9012\u5f52\u5730\u5bf9 pivot \u5de6\u53f3\u4e24\u4fa7\u5b50\u5e8f\u5217\u8fdb\u884c\u6392\u5e8f Other Approachs: Less code, the tradeoff in the code is it uses a bit of extra space. https://leetcode.com/problems/sort-an-array/discuss/277127/7-line-quicksort-to-write-in-interviews-(Python)","title":"what is quicksort"},{"location":"01.Arrays-and-Hashing/912.sort-an-array/#ans","text":"Naive Quick Sort: best O(nlogn), avg O(nlogn), worst O(n^2). 3-way Radix Quicksort Time Complexity: best O(n), avg O(nlogn), worst O(2^K * N). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import random from typing import List class Solution : def sortArray ( self , nums : List [ int ]) -> List [ int ]: self . quickSort ( nums , 0 , len ( nums ) - 1 ) return nums def quickSort ( self , nums , l , r ): if l >= r : return random_index = random . randint ( l , r ) pivot = nums [ random_index ] nums [ l ], nums [ random_index ] = nums [ random_index ], nums [ l ] i = l + 1 # current operation j = l # first smaller to pivot, swapped, left to right k = r + 1 # first larger than pivot, swapped, right to left while i < k : # find num < pivot, swap with leftmost(hasn't been swapped yet) if nums [ i ] < pivot : nums [ i ], nums [ j + 1 ] = nums [ j + 1 ], nums [ i ] j += 1 i += 1 # find num > pivot, swap with rightmost(hasn't been swapped yet) elif nums [ i ] > pivot : nums [ i ], nums [ k - 1 ] = nums [ k - 1 ], nums [ i ] k -= 1 # if num = pivot, skip else : i += 1 nums [ l ], nums [ j ] = nums [ j ], nums [ l ] self . quickSort ( nums , l , j - 1 ) self . quickSort ( nums , k , r ) nums = [ 2 , 8 , 7 , 1 , 3 , 5 , 6 , 4 , 5 , 5 , 6 , 4 ] s = Solution () print ( s . sortArray ( nums ))","title":"ans"},{"location":"01.Arrays-and-Hashing/994.rotting-oranges/","text":"","title":"994.rotting oranges"},{"location":"02.Two-Pointers/11.container-with-most-water/","text":"","title":"11.container with most water"},{"location":"02.Two-Pointers/15.3sum/","text":"15. 3Sum Q: triplets sum 0 Time Complexity: O(N^2) Space Complexity: O(logN) \u76f4\u63a5\u679a\u4e3e\u7684\u8bdd\uff0c\u590d\u6742\u5ea6\u662f O(N^3) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 from typing import List def threeSum ( nums : List [ int ]) -> List [ List [ int ]]: n = len ( nums ) nums . sort () ans = [] for first in range ( n ): if first > 0 and nums [ first ] == nums [ first - 1 ]: continue third = n - 1 target = - nums [ first ] for second in range ( first + 1 , n ): if second > first + 1 and nums [ second ] == nums [ second - 1 ]: continue # two pointers # After sorting, the second loop and the third loop can be changed to a parallel relationship while second < third and nums [ second ] + nums [ third ] > target : third -= 1 if second == third : break if nums [ second ] + nums [ third ] == target : ans . append ([ nums [ first ], nums [ second ], nums [ third ]]) return ans nums = [ - 1 , 0 , 1 , 2 , - 1 , - 4 ] print ( threeSum ( nums ))","title":"15.3sum"},{"location":"02.Two-Pointers/Two-Pointers/","text":"Concept \u00b6 Templates & Basic Operations \u00b6 Ref. \u00b6 https://www.geeksforgeeks.org/difference-between-bfs-and-dfs/","title":"Two Pointers"},{"location":"02.Two-Pointers/Two-Pointers/#concept","text":"","title":"Concept"},{"location":"02.Two-Pointers/Two-Pointers/#templates-basic-operations","text":"","title":"Templates &amp; Basic Operations"},{"location":"02.Two-Pointers/Two-Pointers/#ref","text":"https://www.geeksforgeeks.org/difference-between-bfs-and-dfs/","title":"Ref."},{"location":"02.Two-Pointers/Two-Pointers_zh/","text":"\u53cc\u6307\u9488 \u00b6 \u7ecf\u5178\u5e94\u7528-\u5feb\u6162\u6307\u9488\u627e\u73af \u00b6 \u4e3a\u4ec0\u4e48\u4f1a\u76f8\u9047\uff1ffast = 2 x slow, \u76f8\u5bf9\u901f\u5ea6\u5dee\u4e3a 1\uff0c\u6240\u4ee5\u5fc5\u7136\u8ffd\u4e0a\uff0c\u5f53\u8fdb\u5165\u73af\u4e4b\u540e\uff0c\u5feb\u6162\u6307\u9488\u53ea\u9700\u8981\u79fb\u52a8 n \u6b65\uff08n \u4e3a \u5f7c\u6b64\u7684\u8ddd\u79bb\uff09\u5373\u53ef\u76f8\u9047\u3002 \u53c2\u8003 \u00b6 https://oi-wiki.org/misc/two-pointer/ \u4e3a\u4ec0\u4e48\u7528\u5feb\u6162\u6307\u9488\u627e\u94fe\u8868\u7684\u73af\uff0c\u5feb\u6307\u9488\u548c\u6162\u6307\u9488\u4e00\u5b9a\u4f1a\u76f8\u9047\uff1f","title":"\u53cc\u6307\u9488"},{"location":"02.Two-Pointers/Two-Pointers_zh/#_1","text":"","title":"\u53cc\u6307\u9488"},{"location":"02.Two-Pointers/Two-Pointers_zh/#-","text":"\u4e3a\u4ec0\u4e48\u4f1a\u76f8\u9047\uff1ffast = 2 x slow, \u76f8\u5bf9\u901f\u5ea6\u5dee\u4e3a 1\uff0c\u6240\u4ee5\u5fc5\u7136\u8ffd\u4e0a\uff0c\u5f53\u8fdb\u5165\u73af\u4e4b\u540e\uff0c\u5feb\u6162\u6307\u9488\u53ea\u9700\u8981\u79fb\u52a8 n \u6b65\uff08n \u4e3a \u5f7c\u6b64\u7684\u8ddd\u79bb\uff09\u5373\u53ef\u76f8\u9047\u3002","title":"\u7ecf\u5178\u5e94\u7528-\u5feb\u6162\u6307\u9488\u627e\u73af"},{"location":"02.Two-Pointers/Two-Pointers_zh/#_2","text":"https://oi-wiki.org/misc/two-pointer/ \u4e3a\u4ec0\u4e48\u7528\u5feb\u6162\u6307\u9488\u627e\u94fe\u8868\u7684\u73af\uff0c\u5feb\u6307\u9488\u548c\u6162\u6307\u9488\u4e00\u5b9a\u4f1a\u76f8\u9047\uff1f","title":"\u53c2\u8003"},{"location":"03.Sliding-Window/3.longest-substring-without-repeating-characters/","text":"","title":"3.longest substring without repeating characters"},{"location":"03.Sliding-Window/424.longest-repeating-character-replacement/","text":"424. Longest Repeating Character Replacement","title":"424.longest repeating character replacement"},{"location":"03.Sliding-Window/76.minimum-window-substring/","text":"76. Minimum Window Substring","title":"76.minimum window substring"},{"location":"04.Stack/Stack_zh/","text":"\u961f\u5217\u5b9e\u73b0\u6808\uff0c\u5355\u961f\u5217\u5373\u53ef\uff0c\u6bcf\u6b21\u5165\u961f\u540e\uff0c\u5c06\u524d queue.size() - 1 \u4e2a\u5143\u7d20\u4e00\u6b21\u91cd\u65b0\u5165\u961f\u5e76 pop \u6389 1 2 3 4 5 6 7 8 9 void push ( int x ) { q . push ( x ); for ( int i = 1 ; i < q . size (); ++ i ) { q . push ( q . front ()); q . pop (); } } \u6808\u5b9e\u73b0\u961f\u5217\uff0c\u5143\u7d20push\u5230input\u6808\uff0c\u9700\u8981\u53d6\u961f\u9996\u5143\u7d20\u65f6\uff0c 1. \u8fd4\u56deoutput\u6808\u9876\u5143\u7d20 2. \u82e5output\u6808\u4e3a\u7a7a\uff0c\u4f9d\u6b21\u53d6input\u6808\u9876\uff0c\u5165\u6808\u5230output\u6808 1 2 3 4 5 6 7 8 9 10 11 12 13 /** Get the front element. */ int peek () { if ( output . empty ()) { while ( input . size ()) { output . push ( input . top ()); input . pop (); } } return output . top (); }","title":"Stack zh"},{"location":"05.Binary-Search/153.find-minimum-in-rotated-sorted-array/","text":"","title":"153.find minimum in rotated sorted array"},{"location":"05.Binary-Search/33.search-in-rotated-sorted-array/","text":"33. Search in Rotated Sorted Array","title":"33.search in rotated sorted array"},{"location":"05.Binary-Search/Binary-Search/","text":"","title":"Binary Search"},{"location":"05.Binary-Search/Binary-Search_zh/","text":"\u4e8c\u5206\u67e5\u627e \u00b6 https://en.cppreference.com/w/cpp/container/vector \u7ebf\u6027\u8868\u7684\u5b9e\u73b0\u6bd4\u8f83\u5bb9\u6613\uff0c\u8981\u6c42\u6700\u4f18\u7684\u6027\u80fd \u987a\u5e8f\u5b58\u50a8 \u987a\u5e8f\u8868 \u94fe\u5f0f\u5b58\u50a8 \u5355\u94fe\u8868\uff0c\u53cc\u94fe\u8868\uff0c\u5faa\u73af\u94fe\u8868\uff08\u6307\u9488\u5b9e\u73b0\uff09\uff1b\u9759\u6001\u94fe\u8868\uff08\u501f\u52a9\u6570\u7ec4\u5b9e\u73b0\uff09 vector \u53ef\u53d8\u5927\u5c0f\u6570\u7ec4\uff0c\u9ad8\u6548\u9759\u6001\u64cd\u4f5c get, search list \u53cc\u5411\u94fe\u8868\uff0c\u9ad8\u6548\u52a8\u6001\u64cd\u4f5c insert, remove \u4e8c\u5206\u67e5\u627e \u00b6 \u521d\u59cb\u7248\u672c https://dsa.cs.tsinghua.edu.cn/~deng/ds/src_link/vector/vector_search_binary_a.h.htm \u76f8\u5bf9\u4e8e a\uff0cb \u5c06\u4e09\u4e2a\u5206\u652f\u6539\u4e3a\u4e24\u4e2a\uff0c\u5c06 mi \u5305\u542b\u5230\u53f3\u534a\u5206\u652f https://dsa.cs.tsinghua.edu.cn/~deng/ds/src_link/vector/vector_search_binary_b.h.htm \u4e0d\u5305\u542b mi \u6765\u5224\u65ad 1 2 3 4 5 6 7 8 // \u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\uff08\u7248\u672cC\uff09\uff1a\u5728\u6709\u5e8f\u5411\u91cf\u7684\u533a\u95f4[lo, hi)\u5185\u67e5\u627e\u5143\u7d20e\uff0c0 <= lo <= hi <= _size template < typename T > static Rank binSearch ( T * S , T const & e , Rank lo , Rank hi ) { while ( lo < hi ) { //\u6bcf\u6b65\u8fed\u4ee3\u4ec5\u9700\u505a\u4e00\u6b21\u6bd4\u8f83\u5224\u65ad\uff0c\u6709\u4e24\u4e2a\u5206\u652f Rank mi = ( lo + hi ) >> 1 ; //\u4ee5\u4e2d\u70b9\u4e3a\u8f74\u70b9\uff08\u533a\u95f4\u5bbd\u5ea6\u7684\u6298\u534a\uff0c\u7b49\u6548\u4e8e\u5bbd\u5ea6\u4e4b\u6570\u503c\u8868\u793a\u7684\u53f3\u79fb\uff09 ( e < S [ mi ] ) ? hi = mi : lo = mi + 1 ; //\u7ecf\u6bd4\u8f83\u540e\u786e\u5b9a\u6df1\u5165[lo, mi)\u6216(mi, hi) } //\u6210\u529f\u67e5\u627e\u4e0d\u80fd\u63d0\u524d\u7ec8\u6b62 return lo - 1 ; //\u5faa\u73af\u7ed3\u675f\u65f6\uff0clo\u4e3a\u5927\u4e8ee\u7684\u5143\u7d20\u7684\u6700\u5c0f\u79e9\uff0c\u6545lo - 1\u5373\u4e0d\u5927\u4e8ee\u7684\u5143\u7d20\u7684\u6700\u5927\u79e9 } //\u6709\u591a\u4e2a\u547d\u4e2d\u5143\u7d20\u65f6\uff0c\u603b\u80fd\u4fdd\u8bc1\u8fd4\u56de\u79e9\u6700\u5927\u8005\uff1b\u67e5\u627e\u5931\u8d25\u65f6\uff0c\u80fd\u591f\u8fd4\u56de\u5931\u8d25\u7684\u4f4d\u7f6e https://dsa.cs.tsinghua.edu.cn/~deng/ds/src_link/vector/vector_search_binary_c.h.htm Fibonacci \u67e5\u627e\u4e2d\uff0c\u5047\u8bbe\u5143\u7d20\u662f\u6709\u5e8f\u7684 \u5747\u5300\u4e14\u72ec\u7acb\u7684\u968f\u673a\u5206\u5e03\uff0c\u7528\u63d2\u503c\u67e5\u627e\u731c\u6d4b\u8f74\u70b9 \\(mi \\approx lo + (hi -lo) \\cdot \\frac{e - A[lo]}{A[hi] - A[lo]}\\) \u638c\u63e1\u4e0a\u8ff0\u4e00\u7cfb\u5217\u6539\u8fdb\u7684\u601d\u60f3\u4e0e\u7f16\u7801 \u8d77\u6ce1\u6392\u5e8f \u00b6 \u8d77\u6ce1\u6392\u5e8f\uff0c\u901a\u8fc7\u68c0\u67e5\u9006\u5e8f\u5bf9\u51fa\u73b0\u7684\u4f4d\u7f6e\u5e76\u4f5c\u6807\u8bb0\u6765\u4f18\u5316 \u57fa\u672c\u7248 https://dsa.cs.tsinghua.edu.cn/~deng/ds/src_link/vector/vector_bubblesort_a.h.htm \u63d0\u524d\u7ec8\u6b62\u7248 https://dsa.cs.tsinghua.edu.cn/~deng/ds/src_link/vector/vector_bubblesort_b.h.htm \u8df3\u8dc3\u7248 https://dsa.cs.tsinghua.edu.cn/~deng/ds/src_link/vector/vector_bubblesort_c.h.htm \u4e8c\u8def\u5f52\u5e76\u7684\u7cbe\u7b80 LightHouse \u4e24\u79cd\u89e3\u6cd5 OJ \u4e0a\u7684\u9898\u9700\u8981\u6df1\u523b\u7406\u89e3 \u9009\u62e9\u6392\u5e8f \u6709\u5e8f\u5728\u540e\uff0c\u524d\u9762\u7684\u65e0\u5e8f\u5c0f\u4e8e\u540e\u9762\u7684\u6709\u5e8f \u63d2\u5165\u6392\u5e8f input-sensitive \u6709\u5e8f\u5728\u524d \u6ce8\u610f\uff1a\u7ebf\u6027\u8868\u4e2d\u5143\u7d20\u7684\u4f4d\u5e8f\u4ece 1 \u5f00\u59cb\uff0c\u800c\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u4e0b\u6807\u4ece 0 \u5f00\u59cb \u5f52\u5e76\u6392\u5e8f \u00b6 \u4f4d\u56fe \u00b6","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"05.Binary-Search/Binary-Search_zh/#_1","text":"https://en.cppreference.com/w/cpp/container/vector \u7ebf\u6027\u8868\u7684\u5b9e\u73b0\u6bd4\u8f83\u5bb9\u6613\uff0c\u8981\u6c42\u6700\u4f18\u7684\u6027\u80fd \u987a\u5e8f\u5b58\u50a8 \u987a\u5e8f\u8868 \u94fe\u5f0f\u5b58\u50a8 \u5355\u94fe\u8868\uff0c\u53cc\u94fe\u8868\uff0c\u5faa\u73af\u94fe\u8868\uff08\u6307\u9488\u5b9e\u73b0\uff09\uff1b\u9759\u6001\u94fe\u8868\uff08\u501f\u52a9\u6570\u7ec4\u5b9e\u73b0\uff09 vector \u53ef\u53d8\u5927\u5c0f\u6570\u7ec4\uff0c\u9ad8\u6548\u9759\u6001\u64cd\u4f5c get, search list \u53cc\u5411\u94fe\u8868\uff0c\u9ad8\u6548\u52a8\u6001\u64cd\u4f5c insert, remove","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"05.Binary-Search/Binary-Search_zh/#_2","text":"\u521d\u59cb\u7248\u672c https://dsa.cs.tsinghua.edu.cn/~deng/ds/src_link/vector/vector_search_binary_a.h.htm \u76f8\u5bf9\u4e8e a\uff0cb \u5c06\u4e09\u4e2a\u5206\u652f\u6539\u4e3a\u4e24\u4e2a\uff0c\u5c06 mi \u5305\u542b\u5230\u53f3\u534a\u5206\u652f https://dsa.cs.tsinghua.edu.cn/~deng/ds/src_link/vector/vector_search_binary_b.h.htm \u4e0d\u5305\u542b mi \u6765\u5224\u65ad 1 2 3 4 5 6 7 8 // \u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\uff08\u7248\u672cC\uff09\uff1a\u5728\u6709\u5e8f\u5411\u91cf\u7684\u533a\u95f4[lo, hi)\u5185\u67e5\u627e\u5143\u7d20e\uff0c0 <= lo <= hi <= _size template < typename T > static Rank binSearch ( T * S , T const & e , Rank lo , Rank hi ) { while ( lo < hi ) { //\u6bcf\u6b65\u8fed\u4ee3\u4ec5\u9700\u505a\u4e00\u6b21\u6bd4\u8f83\u5224\u65ad\uff0c\u6709\u4e24\u4e2a\u5206\u652f Rank mi = ( lo + hi ) >> 1 ; //\u4ee5\u4e2d\u70b9\u4e3a\u8f74\u70b9\uff08\u533a\u95f4\u5bbd\u5ea6\u7684\u6298\u534a\uff0c\u7b49\u6548\u4e8e\u5bbd\u5ea6\u4e4b\u6570\u503c\u8868\u793a\u7684\u53f3\u79fb\uff09 ( e < S [ mi ] ) ? hi = mi : lo = mi + 1 ; //\u7ecf\u6bd4\u8f83\u540e\u786e\u5b9a\u6df1\u5165[lo, mi)\u6216(mi, hi) } //\u6210\u529f\u67e5\u627e\u4e0d\u80fd\u63d0\u524d\u7ec8\u6b62 return lo - 1 ; //\u5faa\u73af\u7ed3\u675f\u65f6\uff0clo\u4e3a\u5927\u4e8ee\u7684\u5143\u7d20\u7684\u6700\u5c0f\u79e9\uff0c\u6545lo - 1\u5373\u4e0d\u5927\u4e8ee\u7684\u5143\u7d20\u7684\u6700\u5927\u79e9 } //\u6709\u591a\u4e2a\u547d\u4e2d\u5143\u7d20\u65f6\uff0c\u603b\u80fd\u4fdd\u8bc1\u8fd4\u56de\u79e9\u6700\u5927\u8005\uff1b\u67e5\u627e\u5931\u8d25\u65f6\uff0c\u80fd\u591f\u8fd4\u56de\u5931\u8d25\u7684\u4f4d\u7f6e https://dsa.cs.tsinghua.edu.cn/~deng/ds/src_link/vector/vector_search_binary_c.h.htm Fibonacci \u67e5\u627e\u4e2d\uff0c\u5047\u8bbe\u5143\u7d20\u662f\u6709\u5e8f\u7684 \u5747\u5300\u4e14\u72ec\u7acb\u7684\u968f\u673a\u5206\u5e03\uff0c\u7528\u63d2\u503c\u67e5\u627e\u731c\u6d4b\u8f74\u70b9 \\(mi \\approx lo + (hi -lo) \\cdot \\frac{e - A[lo]}{A[hi] - A[lo]}\\) \u638c\u63e1\u4e0a\u8ff0\u4e00\u7cfb\u5217\u6539\u8fdb\u7684\u601d\u60f3\u4e0e\u7f16\u7801","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"05.Binary-Search/Binary-Search_zh/#_3","text":"\u8d77\u6ce1\u6392\u5e8f\uff0c\u901a\u8fc7\u68c0\u67e5\u9006\u5e8f\u5bf9\u51fa\u73b0\u7684\u4f4d\u7f6e\u5e76\u4f5c\u6807\u8bb0\u6765\u4f18\u5316 \u57fa\u672c\u7248 https://dsa.cs.tsinghua.edu.cn/~deng/ds/src_link/vector/vector_bubblesort_a.h.htm \u63d0\u524d\u7ec8\u6b62\u7248 https://dsa.cs.tsinghua.edu.cn/~deng/ds/src_link/vector/vector_bubblesort_b.h.htm \u8df3\u8dc3\u7248 https://dsa.cs.tsinghua.edu.cn/~deng/ds/src_link/vector/vector_bubblesort_c.h.htm \u4e8c\u8def\u5f52\u5e76\u7684\u7cbe\u7b80 LightHouse \u4e24\u79cd\u89e3\u6cd5 OJ \u4e0a\u7684\u9898\u9700\u8981\u6df1\u523b\u7406\u89e3 \u9009\u62e9\u6392\u5e8f \u6709\u5e8f\u5728\u540e\uff0c\u524d\u9762\u7684\u65e0\u5e8f\u5c0f\u4e8e\u540e\u9762\u7684\u6709\u5e8f \u63d2\u5165\u6392\u5e8f input-sensitive \u6709\u5e8f\u5728\u524d \u6ce8\u610f\uff1a\u7ebf\u6027\u8868\u4e2d\u5143\u7d20\u7684\u4f4d\u5e8f\u4ece 1 \u5f00\u59cb\uff0c\u800c\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u4e0b\u6807\u4ece 0 \u5f00\u59cb","title":"\u8d77\u6ce1\u6392\u5e8f"},{"location":"05.Binary-Search/Binary-Search_zh/#_4","text":"","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"05.Binary-Search/Binary-Search_zh/#_5","text":"","title":"\u4f4d\u56fe"},{"location":"06.Linked-List/143.reorder-list/","text":"","title":"143.reorder list"},{"location":"06.Linked-List/19.remove-nth-node-from-end-of-list/","text":"","title":"19.remove nth node from end of list"},{"location":"06.Linked-List/23.merge-k-sorted-lists/","text":"","title":"23.merge k sorted lists"},{"location":"07.Trees/102.binary-tree-level-order-traversal/","text":"102. Binary Tree Level Order Traversal","title":"102.binary tree level order traversal"},{"location":"07.Trees/105.construct-binary-tree-from-preorder-and-inorder-traversal/","text":"105. Construct Binary Tree from Preorder and Inorder Traversal","title":"105.construct binary tree from preorder and inorder traversal"},{"location":"07.Trees/124.binary-tree-maximum-path-sum/","text":"","title":"124.binary tree maximum path sum"},{"location":"07.Trees/230.kth-smallest-element-in-a-bst/","text":"230. Kth Smallest Element in a BST","title":"230.kth smallest element in a bst"},{"location":"07.Trees/297.serialize-and-deserialize-binary-tree/","text":"","title":"297.serialize and deserialize binary tree"},{"location":"07.Trees/98.validate-binary-search-tree/","text":"98. Validate Binary Search Tree","title":"98.validate binary search tree"},{"location":"07.Trees/Tree/","text":"DFS & BFS \u00b6 DFS: vertex-based, use queue, first in first out. BFS: edge-based, use stack, last in fisrt out. https://stackoverflow.com/questions/687731/breadth-first-vs-depth-first When is it practical to use Depth-First Search (DFS) vs Breadth-First Search (BFS)? - answered by Hans-Peter Storr Graphs data structure: DFS vs BFS? - answered by Polaris878","title":"Tree"},{"location":"07.Trees/Tree/#dfs-bfs","text":"DFS: vertex-based, use queue, first in first out. BFS: edge-based, use stack, last in fisrt out. https://stackoverflow.com/questions/687731/breadth-first-vs-depth-first When is it practical to use Depth-First Search (DFS) vs Breadth-First Search (BFS)? - answered by Hans-Peter Storr Graphs data structure: DFS vs BFS? - answered by Polaris878","title":"DFS &amp; BFS"},{"location":"07.Trees/Tree_zh/","text":"\u6811 \u00b6 \u5e38\u8003\u7684\u662f\u4e8c\u53c9\u6811\u3001\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5404\u79cd\u64cd\u4f5c\uff0c\u6df1\u641c\u3001\u5e7f\u641c \u6982\u5ff5 \u00b6 \u6811\u5c31\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u56fe \u786e\u8ba4\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\u6df1\u5ea6\u5b9a\u4e49\u6210 1 \u8fd8\u662f 0\uff1f \u6a21\u7248 & \u57fa\u672c\u64cd\u4f5c \u00b6 \u76f8\u540c\u7684\u6811 & \u6811\u7684\u6df1\u5ea6/\u5bbd\u5ea6/\u76f4\u5f84 & \u6811\u7684\u7ffb\u8f6c/\u5408\u5e76/\u8def\u5f84\u548c & \u8282\u70b9\u7684\u516c\u5171\u7956\u5148 \u00b6 \u6811\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316 \u00b6 \u524d\u5e8f\u904d\u5386 & \u4e2d\u5e8f\u904d\u5386 & \u540e\u5e8f\u904d\u5386 & \u5c42\u6b21\u904d\u5386 \u00b6 \u4e2d\u5e8f\u904d\u5386\uff0c\u5de6-\u4e2d-\u53f3 Binary Tree Inorder Traversal 1 Ref. \u56fe\u89e3 \u4e8c\u53c9\u6811\u7684\u56db\u79cd\u904d\u5386 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 & \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \u00b6 DFS \u00b6 \u5f53\u56de\u6eaf\u7528\u4e8e\u6811\u7684\u65f6\u5019\uff0c\u5c31\u662f\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3002\u533a\u522b\u5728\u4e8e\u56de\u6eaf\u66f4\u5173\u6ce8\u72b6\u6001\uff0c\u524d\u8fdb\u8bbe\u7f6e\u72b6\u6001\uff0c\u56de\u9000\u64a4\u9500\u72b6\u6001\uff0c\u800c DFS \u5173\u6ce8\u67e5\u627e\u67d0\u4e2a\u6761\u4ef6\u3002 bfs\u6846\u67b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // \u8ba1\u7b97\u4ece\u8d77\u70b9 start \u5230\u7ec8\u70b9 target \u7684\u6700\u8fd1\u8ddd\u79bb int BFS ( Node start , Node target ) { Queue < Node > q ; // \u6838\u5fc3\u6570\u636e\u7ed3\u6784 Set < Node > visited ; // \u907f\u514d\u8d70\u56de\u5934\u8def q . offer ( start ); // \u5c06\u8d77\u70b9\u52a0\u5165\u961f\u5217 visited . add ( start ); int step = 0 ; // \u8bb0\u5f55\u6269\u6563\u7684\u6b65\u6570 while ( q not empty ) { int sz = q . size (); /* \u5c06\u5f53\u524d\u961f\u5217\u4e2d\u7684\u6240\u6709\u8282\u70b9\u5411\u56db\u5468\u6269\u6563 */ for ( int i = 0 ; i < sz ; i ++ ) { Node cur = q . poll (); /* \u5212\u91cd\u70b9\uff1a\u8fd9\u91cc\u5224\u65ad\u662f\u5426\u5230\u8fbe\u7ec8\u70b9 */ if ( cur is target ) return step ; /* \u5c06 cur \u7684\u76f8\u90bb\u8282\u70b9\u52a0\u5165\u961f\u5217 */ for ( Node x : cur . adj ()) if ( x not in visited ) { q . offer ( x ); visited . add ( x ); } } /* \u5212\u91cd\u70b9\uff1a\u66f4\u65b0\u6b65\u6570\u5728\u8fd9\u91cc */ step ++ ; } } \u53c2\u8003 \u00b6","title":"\u6811"},{"location":"07.Trees/Tree_zh/#_1","text":"\u5e38\u8003\u7684\u662f\u4e8c\u53c9\u6811\u3001\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5404\u79cd\u64cd\u4f5c\uff0c\u6df1\u641c\u3001\u5e7f\u641c","title":"\u6811"},{"location":"07.Trees/Tree_zh/#_2","text":"\u6811\u5c31\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u56fe \u786e\u8ba4\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\u6df1\u5ea6\u5b9a\u4e49\u6210 1 \u8fd8\u662f 0\uff1f","title":"\u6982\u5ff5"},{"location":"07.Trees/Tree_zh/#_3","text":"","title":"\u6a21\u7248 &amp; \u57fa\u672c\u64cd\u4f5c"},{"location":"07.Trees/Tree_zh/#_4","text":"","title":"\u76f8\u540c\u7684\u6811 &amp; \u6811\u7684\u6df1\u5ea6/\u5bbd\u5ea6/\u76f4\u5f84 &amp; \u6811\u7684\u7ffb\u8f6c/\u5408\u5e76/\u8def\u5f84\u548c &amp; \u8282\u70b9\u7684\u516c\u5171\u7956\u5148"},{"location":"07.Trees/Tree_zh/#_5","text":"","title":"\u6811\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316"},{"location":"07.Trees/Tree_zh/#_6","text":"\u4e2d\u5e8f\u904d\u5386\uff0c\u5de6-\u4e2d-\u53f3 Binary Tree Inorder Traversal 1 Ref. \u56fe\u89e3 \u4e8c\u53c9\u6811\u7684\u56db\u79cd\u904d\u5386","title":"\u524d\u5e8f\u904d\u5386 &amp; \u4e2d\u5e8f\u904d\u5386 &amp; \u540e\u5e8f\u904d\u5386 &amp; \u5c42\u6b21\u904d\u5386"},{"location":"07.Trees/Tree_zh/#_7","text":"","title":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 &amp; \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"07.Trees/Tree_zh/#dfs","text":"\u5f53\u56de\u6eaf\u7528\u4e8e\u6811\u7684\u65f6\u5019\uff0c\u5c31\u662f\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3002\u533a\u522b\u5728\u4e8e\u56de\u6eaf\u66f4\u5173\u6ce8\u72b6\u6001\uff0c\u524d\u8fdb\u8bbe\u7f6e\u72b6\u6001\uff0c\u56de\u9000\u64a4\u9500\u72b6\u6001\uff0c\u800c DFS \u5173\u6ce8\u67e5\u627e\u67d0\u4e2a\u6761\u4ef6\u3002 bfs\u6846\u67b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // \u8ba1\u7b97\u4ece\u8d77\u70b9 start \u5230\u7ec8\u70b9 target \u7684\u6700\u8fd1\u8ddd\u79bb int BFS ( Node start , Node target ) { Queue < Node > q ; // \u6838\u5fc3\u6570\u636e\u7ed3\u6784 Set < Node > visited ; // \u907f\u514d\u8d70\u56de\u5934\u8def q . offer ( start ); // \u5c06\u8d77\u70b9\u52a0\u5165\u961f\u5217 visited . add ( start ); int step = 0 ; // \u8bb0\u5f55\u6269\u6563\u7684\u6b65\u6570 while ( q not empty ) { int sz = q . size (); /* \u5c06\u5f53\u524d\u961f\u5217\u4e2d\u7684\u6240\u6709\u8282\u70b9\u5411\u56db\u5468\u6269\u6563 */ for ( int i = 0 ; i < sz ; i ++ ) { Node cur = q . poll (); /* \u5212\u91cd\u70b9\uff1a\u8fd9\u91cc\u5224\u65ad\u662f\u5426\u5230\u8fbe\u7ec8\u70b9 */ if ( cur is target ) return step ; /* \u5c06 cur \u7684\u76f8\u90bb\u8282\u70b9\u52a0\u5165\u961f\u5217 */ for ( Node x : cur . adj ()) if ( x not in visited ) { q . offer ( x ); visited . add ( x ); } } /* \u5212\u91cd\u70b9\uff1a\u66f4\u65b0\u6b65\u6570\u5728\u8fd9\u91cc */ step ++ ; } }","title":"DFS"},{"location":"07.Trees/Tree_zh/#_8","text":"","title":"\u53c2\u8003"},{"location":"08.Tries/208.implement-trie-prefix-tree/","text":"208. Implement Trie (Prefix Tree)","title":"208.implement trie prefix tree"},{"location":"08.Tries/211.design-add-and-search-words-data-structure/","text":"211. Design Add and Search Words Data Structure","title":"211.design add and search words data structure"},{"location":"08.Tries/212.word-search-ii/","text":"212. Word Search II","title":"212.word search ii"},{"location":"08.Tries/Tries_zh/","text":"\u5b57\u5178\u6811 (\u524d\u7f00\u6811) \u00b6 \u6982\u5ff5 \u00b6 Implement Trie (Prefix Tree) \u6a21\u7248 & \u57fa\u672c\u64cd\u4f5c \u00b6 use dict 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class Trie : ################### \u6bd4\u6bd4\u8f83\u901a\u7528\u7684\u6a21\u677f ###################### def __init__ ( self ): \"\"\" Initialize your data structure here. \"\"\" self . child = dict () self . isword = False def insert ( self , word : str ) -> None : \"\"\" Inserts a word into the trie. \"\"\" rt = self ##########\u76f8\u5f53\u4e8ec++\u7684this\u6307\u9488\uff01\uff01\uff01 for w in word : if w not in rt . child : # \u6ca1\u6709\uff0c\u5c31\u65b0\u5efa rt . child [ w ] = Trie () rt = rt . child [ w ] # \u5f80\u4e0b\u8d70 rt . isword = True # \u6807\u8bb0\u4f4d def search ( self , word : str ) -> bool : \"\"\" Returns if the word is in the trie. \"\"\" rt = self ##########\u76f8\u5f53\u4e8ec++\u7684this\u6307\u9488\uff01\uff01\uff01 for w in word : if w not in rt . child : # \u6709\u5b57\u6bcd\u4e0d\u5728\u8fd9\u6761path\u4e0a\uff0c\u65ad\u4e86 return False rt = rt . child [ w ] # \u6cbf\u7740path\u5f80\u4e0b\u8d70 return rt . isword == True # \u770bisword\u4f4d def startsWith ( self , prefix : str ) -> bool : \"\"\" Returns if there is any word in the trie that starts with the given prefix. \"\"\" rt = self ##########\u76f8\u5f53\u4e8ec++\u7684this\u6307\u9488\uff01\uff01\uff01 for w in prefix : if w not in rt . child : # path\u65ad\u4e86 return False rt = rt . child [ w ] return True # \u65e0\u8bba\u662f\u5426\u662f\u5355\u8bcd\uff0cpath\u6ca1\u65ad\u5c31ok # Your Trie object will be instantiated and called as such: # obj = Trie() # obj.insert(word) # param_2 = obj.search(word) # param_3 = obj.startsWith(prefix) use array 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 class Trie : ################### \u6bd4\u6bd4\u8f83\u901a\u7528\u7684\u6a21\u677f ###################### def __init__ ( self ): \"\"\" Initialize your data structure here. \"\"\" self . child = [ None for _ in range ( 26 )] self . isword = False def insert ( self , word : str ) -> None : \"\"\" Inserts a word into the trie. \"\"\" rt = self ##########\u76f8\u5f53\u4e8ec++\u7684this\u6307\u9488\uff01\uff01\uff01 for w in word : ID = ord ( w ) - ord ( \"a\" ) if rt . child [ ID ] == None : # \u6ca1\u6709\uff0c\u5c31\u65b0\u5efa rt . child [ ID ] = Trie () rt = rt . child [ ID ] # \u5f80\u4e0b\u8d70 rt . isword = True # \u6807\u8bb0\u4f4d def search ( self , word : str ) -> bool : \"\"\" Returns if the word is in the trie. \"\"\" rt = self ##########\u76f8\u5f53\u4e8ec++\u7684this\u6307\u9488\uff01\uff01\uff01 for w in word : ID = ord ( w ) - ord ( \"a\" ) if rt . child [ ID ] == None : # \u6709\u5b57\u6bcd\u4e0d\u5728\u8fd9\u6761path\u4e0a\uff0c\u65ad\u4e86 return False rt = rt . child [ ID ] # \u6cbf\u7740path\u5f80\u4e0b\u8d70 return rt . isword == True # \u770bisword\u4f4d def startsWith ( self , prefix : str ) -> bool : \"\"\" Returns if there is any word in the trie that starts with the given prefix. \"\"\" rt = self ##########\u76f8\u5f53\u4e8ec++\u7684this\u6307\u9488\uff01\uff01\uff01 for w in prefix : ID = ord ( w ) - ord ( \"a\" ) if rt . child [ ID ] == None : # path\u65ad\u4e86 return False rt = rt . child [ ID ] return True # \u65e0\u8bba\u662f\u5426\u662f\u5355\u8bcd\uff0cpath\u6ca1\u65ad\u5c31ok # Your Trie object will be instantiated and called as such: # obj = Trie() # obj.insert(word) # param_2 = obj.search(word) # param_3 = obj.startsWith(prefix) \u53c2\u8003 \u00b6 Trie \u7ef4\u57fa\u767e\u79d1 Trie Tree \u7684\u5b9e\u73b0 (\u9002\u5408\u521d\u5b66\u8005) c++/python3 Trie\u901a\u7528\u6a21\u677f \u6cd51\uff1a\u5b57\u5178hash \u6cd52\uff1a\u6570\u7ec4","title":"\u5b57\u5178\u6811 (\u524d\u7f00\u6811)"},{"location":"08.Tries/Tries_zh/#_1","text":"","title":"\u5b57\u5178\u6811 (\u524d\u7f00\u6811)"},{"location":"08.Tries/Tries_zh/#_2","text":"Implement Trie (Prefix Tree)","title":"\u6982\u5ff5"},{"location":"08.Tries/Tries_zh/#_3","text":"use dict 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class Trie : ################### \u6bd4\u6bd4\u8f83\u901a\u7528\u7684\u6a21\u677f ###################### def __init__ ( self ): \"\"\" Initialize your data structure here. \"\"\" self . child = dict () self . isword = False def insert ( self , word : str ) -> None : \"\"\" Inserts a word into the trie. \"\"\" rt = self ##########\u76f8\u5f53\u4e8ec++\u7684this\u6307\u9488\uff01\uff01\uff01 for w in word : if w not in rt . child : # \u6ca1\u6709\uff0c\u5c31\u65b0\u5efa rt . child [ w ] = Trie () rt = rt . child [ w ] # \u5f80\u4e0b\u8d70 rt . isword = True # \u6807\u8bb0\u4f4d def search ( self , word : str ) -> bool : \"\"\" Returns if the word is in the trie. \"\"\" rt = self ##########\u76f8\u5f53\u4e8ec++\u7684this\u6307\u9488\uff01\uff01\uff01 for w in word : if w not in rt . child : # \u6709\u5b57\u6bcd\u4e0d\u5728\u8fd9\u6761path\u4e0a\uff0c\u65ad\u4e86 return False rt = rt . child [ w ] # \u6cbf\u7740path\u5f80\u4e0b\u8d70 return rt . isword == True # \u770bisword\u4f4d def startsWith ( self , prefix : str ) -> bool : \"\"\" Returns if there is any word in the trie that starts with the given prefix. \"\"\" rt = self ##########\u76f8\u5f53\u4e8ec++\u7684this\u6307\u9488\uff01\uff01\uff01 for w in prefix : if w not in rt . child : # path\u65ad\u4e86 return False rt = rt . child [ w ] return True # \u65e0\u8bba\u662f\u5426\u662f\u5355\u8bcd\uff0cpath\u6ca1\u65ad\u5c31ok # Your Trie object will be instantiated and called as such: # obj = Trie() # obj.insert(word) # param_2 = obj.search(word) # param_3 = obj.startsWith(prefix) use array 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 class Trie : ################### \u6bd4\u6bd4\u8f83\u901a\u7528\u7684\u6a21\u677f ###################### def __init__ ( self ): \"\"\" Initialize your data structure here. \"\"\" self . child = [ None for _ in range ( 26 )] self . isword = False def insert ( self , word : str ) -> None : \"\"\" Inserts a word into the trie. \"\"\" rt = self ##########\u76f8\u5f53\u4e8ec++\u7684this\u6307\u9488\uff01\uff01\uff01 for w in word : ID = ord ( w ) - ord ( \"a\" ) if rt . child [ ID ] == None : # \u6ca1\u6709\uff0c\u5c31\u65b0\u5efa rt . child [ ID ] = Trie () rt = rt . child [ ID ] # \u5f80\u4e0b\u8d70 rt . isword = True # \u6807\u8bb0\u4f4d def search ( self , word : str ) -> bool : \"\"\" Returns if the word is in the trie. \"\"\" rt = self ##########\u76f8\u5f53\u4e8ec++\u7684this\u6307\u9488\uff01\uff01\uff01 for w in word : ID = ord ( w ) - ord ( \"a\" ) if rt . child [ ID ] == None : # \u6709\u5b57\u6bcd\u4e0d\u5728\u8fd9\u6761path\u4e0a\uff0c\u65ad\u4e86 return False rt = rt . child [ ID ] # \u6cbf\u7740path\u5f80\u4e0b\u8d70 return rt . isword == True # \u770bisword\u4f4d def startsWith ( self , prefix : str ) -> bool : \"\"\" Returns if there is any word in the trie that starts with the given prefix. \"\"\" rt = self ##########\u76f8\u5f53\u4e8ec++\u7684this\u6307\u9488\uff01\uff01\uff01 for w in prefix : ID = ord ( w ) - ord ( \"a\" ) if rt . child [ ID ] == None : # path\u65ad\u4e86 return False rt = rt . child [ ID ] return True # \u65e0\u8bba\u662f\u5426\u662f\u5355\u8bcd\uff0cpath\u6ca1\u65ad\u5c31ok # Your Trie object will be instantiated and called as such: # obj = Trie() # obj.insert(word) # param_2 = obj.search(word) # param_3 = obj.startsWith(prefix)","title":"\u6a21\u7248 &amp; \u57fa\u672c\u64cd\u4f5c"},{"location":"08.Tries/Tries_zh/#_4","text":"Trie \u7ef4\u57fa\u767e\u79d1 Trie Tree \u7684\u5b9e\u73b0 (\u9002\u5408\u521d\u5b66\u8005) c++/python3 Trie\u901a\u7528\u6a21\u677f \u6cd51\uff1a\u5b57\u5178hash \u6cd52\uff1a\u6570\u7ec4","title":"\u53c2\u8003"},{"location":"09.%20Heap%28Priority%20Queue%29/295.find-median-from-data-stream/","text":"","title":"295.find median from data stream"},{"location":"09.%20Heap%28Priority%20Queue%29/Heap/","text":"","title":"Heap"},{"location":"09.%20Heap%28Priority%20Queue%29/Heap_zh/","text":"\u5806 (\u4f18\u5148\u961f\u5217) \u00b6 definition complete binary tree https://oi-wiki.org/ds/heap/ https://docs.python.org/3/library/heapq.html, python is min heap, heap[0] is the smallest item. So in the topK problem, the value needs to take the opposite number. \u89e3\u6cd5 \u6784\u9020\u597d\u5f85\u5806\u5316\u7684 list\uff0c\u5bf9\u4e8e Counter \uff0c\u7528 tuple \u6765\u5b58\u50a8 kv pair \u6bd4\u5982 \u6700\u5c0f\u5806 min_heap = [(val, key) for key, val in count.items()] \u6700\u5927\u5806\u53d6\u76f8\u53cd\u6570\u5373\u53ef max_heap = [(-val, key) for key, val in count.items()] \u8fd9\u91cc\u8fd8\u7528\u4e86 tuple \u5e76\u4e14\u53cd\u8f6ckv\uff0c\u8fd9\u6837\u6839\u636ev\u6392\u5e8f\uff0c\u6700\u540e\u53cd\u9988\u7ed3\u679c\u65f6\u4e5f\u53ef\u4ee5\u76f4\u63a5\u53d6\u5230k dict.items() returns a list of dict's (key, value) tuple pairs \u5806\u5316 heapq.heapify(heap)","title":"\u5806 (\u4f18\u5148\u961f\u5217)"},{"location":"09.%20Heap%28Priority%20Queue%29/Heap_zh/#_1","text":"definition complete binary tree https://oi-wiki.org/ds/heap/ https://docs.python.org/3/library/heapq.html, python is min heap, heap[0] is the smallest item. So in the topK problem, the value needs to take the opposite number. \u89e3\u6cd5 \u6784\u9020\u597d\u5f85\u5806\u5316\u7684 list\uff0c\u5bf9\u4e8e Counter \uff0c\u7528 tuple \u6765\u5b58\u50a8 kv pair \u6bd4\u5982 \u6700\u5c0f\u5806 min_heap = [(val, key) for key, val in count.items()] \u6700\u5927\u5806\u53d6\u76f8\u53cd\u6570\u5373\u53ef max_heap = [(-val, key) for key, val in count.items()] \u8fd9\u91cc\u8fd8\u7528\u4e86 tuple \u5e76\u4e14\u53cd\u8f6ckv\uff0c\u8fd9\u6837\u6839\u636ev\u6392\u5e8f\uff0c\u6700\u540e\u53cd\u9988\u7ed3\u679c\u65f6\u4e5f\u53ef\u4ee5\u76f4\u63a5\u53d6\u5230k dict.items() returns a list of dict's (key, value) tuple pairs \u5806\u5316 heapq.heapify(heap)","title":"\u5806 (\u4f18\u5148\u961f\u5217)"},{"location":"10.Backtracking/1088.confusing-number-ii/","text":"1088. Confusing Number II Premium \u00b6 1088. \u6613\u6df7\u6dc6\u6570 II \u4f1a\u5458 Q: A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid. return the number of confusing numbers in [1, n] A: ? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 class Solution : def confusingNumberII ( self , N : int ) -> int : if N < 6 : return 0 elif N < 9 : return 1 elif N == 9 : return 2 N = list ( map ( int , list ( str ( N )))) n = len ( N ) res = 5 ** ( n - 1 ) - 1 # \u8ba1\u7b97\u6570\u4f4d\u5c0f\u4e8en\u4e14\u7531reflex\u4e2d\u7684\u6570\u4f5c\u6570\u7801\u7684\u4e2a\u6570 less = [ 0 , 1 , 2 , 2 , 2 , 2 , 2 , 3 , 3 , 4 ] # less[i]\u8868\u793a\u5c0f\u4e8ei\u4e14\u5c5e\u4e8ereflex\u7684\u6570\u7684\u4e2a\u6570 reflex = { 0 : 0 , 1 : 1 , 6 : 9 , 8 : 8 , 9 : 6 } # \u6839\u636eN\u6bcf\u4e00\u4f4d\u7684\u6570\u7801\uff0c\u8ba1\u7b97\u6570\u4f4d\u7b49\u4e8en\u4e14\u7531reflex\u4e2d\u7684\u6570\u4f5c\u6570\u7801\u7684\u4e2a\u6570 res += ( less [ N [ 0 ]] - 1 ) * 5 ** ( n - 1 ) if N [ 0 ] in reflex : for i in range ( 1 , n ): res += less [ N [ i ]] * 5 ** ( n - i - 1 ) if N [ i ] not in reflex : break else : res += 1 # \u8ba1\u7b97\u6570\u4f4d\u5c0f\u4e8en\u4e14\u7531reflex\u4e2d\u7684\u6570\u4f5c\u6570\u7801\u7684\u975e\u6df7\u6dc6\u6570 for i in range ( 1 , n ): if i == 1 : res -= 2 elif i & 1 : res -= 12 * 5 ** ( i - 3 >> 1 ) else : res -= 4 * 5 ** ( i - 2 >> 1 ) # \u6839\u636en\u7684\u5947\u5076\u6027\u5206\u7c7b\u8ba8\u8bba if n & 1 : res -= 3 * ( less [ N [ 0 ]] - 1 ) * 5 ** ( n - 3 >> 1 ) if N [ 0 ] not in reflex : return res for i in range ( 1 , n >> 1 ): res -= 3 * less [ N [ i ]] * 5 ** (( n - 3 >> 1 ) - i ) if N [ i ] not in reflex : return res a = N [ n >> 1 ] if not a : pass elif a == 1 : res -= 1 elif a < 8 : res -= 2 return res elif a == 8 : res -= 2 elif a == 9 : res -= 3 return res for i in range (( n >> 1 ) + 1 , n ): a , b = N [ - i - 1 ], N [ i ] if b > reflex [ a ]: return res - 1 if b < reflex [ a ]: return res return res - 1 else : res -= ( less [ N [ 0 ]] - 1 ) * 5 ** ( n - 2 >> 1 ) if N [ 0 ] not in reflex : return res for i in range ( 1 , n >> 1 ): res -= less [ N [ i ]] * 5 ** (( n >> 1 ) - i - 1 ) if N [ i ] not in reflex : return res for i in range (( n >> 1 ), n ): a , b = N [ - i - 1 ], N [ i ] if b > reflex [ a ]: return res - 1 if b < reflex [ a ]: return res return res - 1","title":"1088.confusing number ii"},{"location":"10.Backtracking/1088.confusing-number-ii/#1088-confusing-number-ii-premium","text":"1088. \u6613\u6df7\u6dc6\u6570 II \u4f1a\u5458 Q: A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid. return the number of confusing numbers in [1, n] A: ? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 class Solution : def confusingNumberII ( self , N : int ) -> int : if N < 6 : return 0 elif N < 9 : return 1 elif N == 9 : return 2 N = list ( map ( int , list ( str ( N )))) n = len ( N ) res = 5 ** ( n - 1 ) - 1 # \u8ba1\u7b97\u6570\u4f4d\u5c0f\u4e8en\u4e14\u7531reflex\u4e2d\u7684\u6570\u4f5c\u6570\u7801\u7684\u4e2a\u6570 less = [ 0 , 1 , 2 , 2 , 2 , 2 , 2 , 3 , 3 , 4 ] # less[i]\u8868\u793a\u5c0f\u4e8ei\u4e14\u5c5e\u4e8ereflex\u7684\u6570\u7684\u4e2a\u6570 reflex = { 0 : 0 , 1 : 1 , 6 : 9 , 8 : 8 , 9 : 6 } # \u6839\u636eN\u6bcf\u4e00\u4f4d\u7684\u6570\u7801\uff0c\u8ba1\u7b97\u6570\u4f4d\u7b49\u4e8en\u4e14\u7531reflex\u4e2d\u7684\u6570\u4f5c\u6570\u7801\u7684\u4e2a\u6570 res += ( less [ N [ 0 ]] - 1 ) * 5 ** ( n - 1 ) if N [ 0 ] in reflex : for i in range ( 1 , n ): res += less [ N [ i ]] * 5 ** ( n - i - 1 ) if N [ i ] not in reflex : break else : res += 1 # \u8ba1\u7b97\u6570\u4f4d\u5c0f\u4e8en\u4e14\u7531reflex\u4e2d\u7684\u6570\u4f5c\u6570\u7801\u7684\u975e\u6df7\u6dc6\u6570 for i in range ( 1 , n ): if i == 1 : res -= 2 elif i & 1 : res -= 12 * 5 ** ( i - 3 >> 1 ) else : res -= 4 * 5 ** ( i - 2 >> 1 ) # \u6839\u636en\u7684\u5947\u5076\u6027\u5206\u7c7b\u8ba8\u8bba if n & 1 : res -= 3 * ( less [ N [ 0 ]] - 1 ) * 5 ** ( n - 3 >> 1 ) if N [ 0 ] not in reflex : return res for i in range ( 1 , n >> 1 ): res -= 3 * less [ N [ i ]] * 5 ** (( n - 3 >> 1 ) - i ) if N [ i ] not in reflex : return res a = N [ n >> 1 ] if not a : pass elif a == 1 : res -= 1 elif a < 8 : res -= 2 return res elif a == 8 : res -= 2 elif a == 9 : res -= 3 return res for i in range (( n >> 1 ) + 1 , n ): a , b = N [ - i - 1 ], N [ i ] if b > reflex [ a ]: return res - 1 if b < reflex [ a ]: return res return res - 1 else : res -= ( less [ N [ 0 ]] - 1 ) * 5 ** ( n - 2 >> 1 ) if N [ 0 ] not in reflex : return res for i in range ( 1 , n >> 1 ): res -= less [ N [ i ]] * 5 ** (( n >> 1 ) - i - 1 ) if N [ i ] not in reflex : return res for i in range (( n >> 1 ), n ): a , b = N [ - i - 1 ], N [ i ] if b > reflex [ a ]: return res - 1 if b < reflex [ a ]: return res return res - 1","title":"1088. Confusing Number II Premium"},{"location":"10.Backtracking/39.combination-sum/","text":"","title":"39.combination sum"},{"location":"10.Backtracking/46.permutations/","text":"Permutations: distinct nums, with duplicates, next permutation, kth permutation. 46. Permutations \u00b6 Q: An array of distinct nums, returning all possible permutations. A: Each position from left to right tries to fill in a number in turn, start means that the current fill in to the start position. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def permute ( self , nums : List [ int ]) -> List [ List [ int ]]: def backtrack ( start , end ): if start == end : # nums[:] use deepcopy because nums is tracking all partial solution # If append nums, like append pointer of nums ans . append ( nums [:]) for i in range ( start , end ): nums [ start ], nums [ i ] = nums [ i ], nums [ start ] backtrack ( start + 1 , end ) # next num nums [ start ], nums [ i ] = nums [ i ], nums [ start ] ans = [] backtrack ( 0 , len ( nums )) return ans 47. Permutations II \u00b6 31. Next Permutation \u00b6 60. Permutation Sequence \u00b6 Ref. \u00b6 Backtrack Summary: General Solution for 10 Questions!!!!!!!! Python (Combination Sum, Subsets, Permutation, Palindrome) LeetCode \u4e2d\u6587\u5b98\u65b9\u9898\u89e3","title":"46.permutations"},{"location":"10.Backtracking/46.permutations/#46-permutations","text":"Q: An array of distinct nums, returning all possible permutations. A: Each position from left to right tries to fill in a number in turn, start means that the current fill in to the start position. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def permute ( self , nums : List [ int ]) -> List [ List [ int ]]: def backtrack ( start , end ): if start == end : # nums[:] use deepcopy because nums is tracking all partial solution # If append nums, like append pointer of nums ans . append ( nums [:]) for i in range ( start , end ): nums [ start ], nums [ i ] = nums [ i ], nums [ start ] backtrack ( start + 1 , end ) # next num nums [ start ], nums [ i ] = nums [ i ], nums [ start ] ans = [] backtrack ( 0 , len ( nums )) return ans","title":"46. Permutations"},{"location":"10.Backtracking/46.permutations/#47-permutations-ii","text":"","title":"47. Permutations II"},{"location":"10.Backtracking/46.permutations/#31-next-permutation","text":"","title":"31. Next Permutation"},{"location":"10.Backtracking/46.permutations/#60-permutation-sequence","text":"","title":"60. Permutation Sequence"},{"location":"10.Backtracking/46.permutations/#ref","text":"Backtrack Summary: General Solution for 10 Questions!!!!!!!! Python (Combination Sum, Subsets, Permutation, Palindrome) LeetCode \u4e2d\u6587\u5b98\u65b9\u9898\u89e3","title":"Ref."},{"location":"10.Backtracking/465.optimal-account-balancing/","text":"https://leetcode.cn/problems/optimal-account-balancing/ Q: transactions[i] = [from_i, to_i, amount_i]. minimum number of transactions required to settle the debt? A: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Solution : def minTransfers ( self , transactions : List [ List [ int ]]) -> int : from collections import defaultdict person = defaultdict ( int ) for x , y , z in transactions : person [ x ] -= z person [ y ] += z # \u8d26\u53f7 accounts = list ( person . values ()) res = float ( \"inf\" ) def dfs ( i , cnt ): nonlocal res # \u5168\u5c40\u53d8\u91cf\u9000\u51fa\u9012\u5f52 if cnt >= res : return # \u8d26\u53f7\u4e3a0\u4e0d\u8003\u8651 while i < len ( accounts ) and accounts [ i ] == 0 : i += 1 # \u904d\u5386\u5b8c if i == len ( accounts ): res = min ( res , cnt ) return for j in range ( i + 1 , len ( accounts )): if accounts [ i ] * accounts [ j ] < 0 : accounts [ j ] += accounts [ i ] dfs ( i + 1 , cnt + 1 ) accounts [ j ] -= accounts [ i ] dfs ( 0 , 0 ) return res","title":"465.optimal account balancing"},{"location":"10.Backtracking/489.robot-room-cleaner/","text":"489. Robot Room Cleaner Premium \u00b6 489. \u626b\u5730\u673a\u5668\u4eba \u4f1a\u5458 Q: m x n binary grid where 0 represents a wall and 1 represents an empty slot. The robot with the four given APIs can move forward, turn left, or turn right. Each turn is 90 degrees. Use robots clean the entire room, design APIs. A: Clean from the starting position and mark. Carry out dfs in 4 directions, if there are obstacles or searched, turn right. do: move backtrack() undo: go back Time complexity: Space complexity: O(N - M) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 # \"\"\" # This is the robot's control interface. # You should not implement it, or speculate about its implementation # \"\"\" #class Robot: # def move(self): # \"\"\" # Returns true if the cell in front is open and robot moves into the cell. # Returns false if the cell in front is blocked and robot stays in the current cell. # :rtype bool # \"\"\" # # def turnLeft(self): # \"\"\" # Robot will stay in the same cell after calling turnLeft/turnRight. # Each turn will be 90 degrees. # :rtype void # \"\"\" # # def turnRight(self): # \"\"\" # Robot will stay in the same cell after calling turnLeft/turnRight. # Each turn will be 90 degrees. # :rtype void # \"\"\" # # def clean(self): # \"\"\" # Clean the current cell. # :rtype void # \"\"\" class Solution : def cleanRoom ( self , robot ): \"\"\" :type robot: Robot :rtype: None \"\"\" def go_back () -> None : robot . turnRight () robot . turnRight () robot . move () robot . turnRight () robot . turnRight () dirs = [( - 1 , 0 ), ( 0 , 1 ), ( 1 , 0 ), ( 0 , - 1 )] # going clockwise: top right bottom left visited = set () def backtrack ( r : int , c : int , di : int ) -> None : visited . add (( r , c )) robot . clean () for d in range ( 0 , 4 ): ndi = ( di + d ) % 4 # next direction, clockwise dr , dc = dirs [ ndi ] nr = r + dr nc = c + dc if ( nr , nc ) not in visited and robot . move () == True : backtrack ( nr , nc , ndi ) go_back () # go back, backtrack # robot.turnLeft() # counterclockwise, backtracking robot . turnRight () # clockwise backtrack ( 0 , 0 , 0 ) Ref. \u00b6 c++/python3 \u56de\u6eaf Hanxin","title":"489.robot room cleaner"},{"location":"10.Backtracking/489.robot-room-cleaner/#489-robot-room-cleaner-premium","text":"489. \u626b\u5730\u673a\u5668\u4eba \u4f1a\u5458 Q: m x n binary grid where 0 represents a wall and 1 represents an empty slot. The robot with the four given APIs can move forward, turn left, or turn right. Each turn is 90 degrees. Use robots clean the entire room, design APIs. A: Clean from the starting position and mark. Carry out dfs in 4 directions, if there are obstacles or searched, turn right. do: move backtrack() undo: go back Time complexity: Space complexity: O(N - M) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 # \"\"\" # This is the robot's control interface. # You should not implement it, or speculate about its implementation # \"\"\" #class Robot: # def move(self): # \"\"\" # Returns true if the cell in front is open and robot moves into the cell. # Returns false if the cell in front is blocked and robot stays in the current cell. # :rtype bool # \"\"\" # # def turnLeft(self): # \"\"\" # Robot will stay in the same cell after calling turnLeft/turnRight. # Each turn will be 90 degrees. # :rtype void # \"\"\" # # def turnRight(self): # \"\"\" # Robot will stay in the same cell after calling turnLeft/turnRight. # Each turn will be 90 degrees. # :rtype void # \"\"\" # # def clean(self): # \"\"\" # Clean the current cell. # :rtype void # \"\"\" class Solution : def cleanRoom ( self , robot ): \"\"\" :type robot: Robot :rtype: None \"\"\" def go_back () -> None : robot . turnRight () robot . turnRight () robot . move () robot . turnRight () robot . turnRight () dirs = [( - 1 , 0 ), ( 0 , 1 ), ( 1 , 0 ), ( 0 , - 1 )] # going clockwise: top right bottom left visited = set () def backtrack ( r : int , c : int , di : int ) -> None : visited . add (( r , c )) robot . clean () for d in range ( 0 , 4 ): ndi = ( di + d ) % 4 # next direction, clockwise dr , dc = dirs [ ndi ] nr = r + dr nc = c + dc if ( nr , nc ) not in visited and robot . move () == True : backtrack ( nr , nc , ndi ) go_back () # go back, backtrack # robot.turnLeft() # counterclockwise, backtracking robot . turnRight () # clockwise backtrack ( 0 , 0 , 0 )","title":"489. Robot Room Cleaner Premium"},{"location":"10.Backtracking/489.robot-room-cleaner/#ref","text":"c++/python3 \u56de\u6eaf Hanxin","title":"Ref."},{"location":"10.Backtracking/79.word-search/","text":"https://leetcode.com/problems/word-search-ii/","title":"79.word search"},{"location":"10.Backtracking/Backtracking/","text":"\u4e2d\u6587 Concept \u00b6 Backtracking Wiki Template & Basic operation \u00b6 1","title":"Backtracking"},{"location":"10.Backtracking/Backtracking/#concept","text":"Backtracking Wiki","title":"Concept"},{"location":"10.Backtracking/Backtracking/#template-basic-operation","text":"1","title":"Template &amp; Basic operation"},{"location":"10.Backtracking/Backtracking_zh/","text":"\u56de\u6eaf \u00b6 English \u6982\u5ff5 \u00b6 \u56de\u6eaf\u5206\u6b65\u8bd5\u63a2\u6bcf\u79cd\u53ef\u80fd\u6027\uff0c\u5982\u679c\u5f53\u524d\u4e0d\u662f\u76ee\u6807\uff0c\u5219\u9000\u56de\u4e0a\u4e00\u6b65\u5c1d\u8bd5\u5176\u4ed6\u53ef\u80fd\uff0c\u56e0\u4e3a\u5927\u591a\u65f6\u5019\u6bcf\u4e00\u6b65\u7684\u5904\u7406\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u7528\u9012\u5f52\u6765\u89e3\u51b3\uff0c\u4e00\u4e2a\u9012\u5f52\u7b97\u6cd5\u4e00\u5b9a\u8981\u6709\u51fa\u53e3\uff0c\u56de\u6eaf\u4f5c\u7528\u5230\u6811\u65f6\u5c31\u662f\u7c7b\u4f3c DFS\uff0c\u51e0\u4e4e\u6240\u6709\u53ef\u4ee5\u7528\u56de\u6eaf\u89e3\u51b3\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u8868\u793a\u4e3a\u6811\u3002 \u5178\u578b\u95ee\u9898\u6709 \u6392\u5217\u3001\u7ec4\u5408\uff08\u5b50\u96c6\u3001\u5e42\u96c6\u3001\u5b57\u7b26\u5168\u6392\u5217\uff09\u3002 \u5728\u4f20\u503c\u65f6\uff0c\u5bf9\u4e8e\u6392\u5217\u95ee\u9898\uff0c\u662f\u8981\u5220\u6389\u5355\u4e2a\u7528\u8fc7\u7684\u5143\u7d20\uff1b\u7ec4\u5408\u95ee\u9898\uff0c\u662f\u5220\u6389\u524d\u9762\u6240\u6709\u7684\u5143\u7d20 \u6570\u7ec4\u3001\u5b57\u7b26\u4e32\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u7279\u5b9a\u7684\u89c4\u5219\uff0c\u5c1d\u8bd5\u641c\u7d22\u8fed\u4ee3\u627e\u5230\u67d0\u4e2a\u89e3 \u4e8c\u7ef4\u6570\u7ec4\u4e0b\u7684 DFS \u6a21\u7248 & \u57fa\u672c\u64cd\u4f5c \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 res = [] # \u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\u4fdd\u5b58\u6700\u7ec8\u7ed3\u679c state = [] # \u5b9a\u4e49\u72b6\u6001\u53d8\u91cf\u4fdd\u5b58\u5f53\u524d\u72b6\u6001\uff0c\u72b6\u6001\u53d8\u91cf\uff08state\uff09\u5c31\u662f\u6700\u540e\u7ed3\u679c\uff08result\uff09\u8981\u4fdd\u5b58\u7684\u503c p , q , r # \u5b9a\u4e49\u6761\u4ef6\u53d8\u91cf\uff08\u4e00\u822c\u6761\u4ef6\u53d8\u91cf\u5c31\u662f\u9898\u76ee\u76f4\u63a5\u7ed9\u7684\u53c2\u6570\uff09\uff0c\u6761\u4ef6\u53d8\u91cf\u5c31\u662f\u51b3\u5b9a\u641c\u7d22\u662f\u5426\u5b8c\u6bd5\u6216\u8005\u5408\u6cd5\u7684\u503c def backtrack ( \u72b6\u6001 \uff0c \u6761\u4ef61 \uff0c \u6761\u4ef62 \uff0c ... ): if # \u4e0d\u6ee1\u8db3\u5408\u6cd5\u6761\u4ef6\uff08\u53ef\u4ee5\u8bf4\u662f\u526a\u679d\uff09\uff0c\u641c\u7d22\u5931\u8d25\u5e76\u8fd4\u56de\u4e0a\u4e00\u6b21\u72b6\u6001 return elif # \u72b6\u6001\u6ee1\u8db3\u6700\u7ec8\u8981\u6c42\uff0c\u641c\u7d22\u6210\u529f\u5e76\u4fdd\u5b58\u7ed3\u679c res . append ( state ) return # \u4e3b\u8981\u9012\u5f52\u8fc7\u7a0b\uff0c\u4e00\u822c\u662f\u5e26\u6709 \u5faa\u73af\u4f53 \u6216\u8005 \u6761\u4ef6\u4f53\uff0c\u4f20\u9012\u5f53\u524d\u72b6\u6001\u7ed9\u4e0b\u4e00\u6b21\u9012\u5f52\u8fdb\u884c\u641c\u7d22\u3002\u9009\u62e9\u5217\u8868 for / if # \u6ee1\u8db3\u6267\u884c\u6761\u4ef6 do # \u505a\u9009\u62e9 backtrack ( \u72b6\u6001 \uff0c \u6761\u4ef61 \uff0c \u6761\u4ef62 \uff0c ... ) undo # \u64a4\u9500\u9009\u62e9 backtrack ( \u72b6\u6001 \uff0c \u6761\u4ef61 \uff0c \u6761\u4ef62 \uff0c ... ) return res \u793a\u4f8b1\uff0c 22. \u62ec\u53f7\u751f\u6210 \uff0c\u7ed9\u4e00\u4e2a\u6570\u5b57 n\uff0c\u751f\u6210 n \u5bf9\u62ec\u53f7\u7684\u6240\u6709\u5339\u914d \u4e00\u4e2a\u6811\u5f62\u7ed3\u6784\uff0c\u4ece\u6839\u8282\u70b9\u51fa\u53d1\uff0c\u7528\u6808\u6765\u7ba1\u7406\u8def\u5f84\u4e0a\u7684\u62ec\u53f7\uff0c\u5de6\u62ec\u53f7\u6570\u91cf < \u53f3\u62ec\u53f7\u7684\u65f6\u5019\uff0c\u526a\u679d \u901a\u8fc7 debug \u53ef\u4ee5\u89c2\u5bdf\u5230 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def generateParenthesis ( self , n : int ) -> List [ str ]: ans = [] def backtrack ( S , left , right ): # \u7ed3\u675f\u6761\u4ef6\uff0c\u62ec\u5f27\u5168\u90e8\u7528\u5b8c\u4e86 if len ( S ) == 2 * n : ans . append ( \"\" . join ( S )) return # \u5de6\u62ec\u53f7\u6570\u91cf\u4e0d\u5927\u4e8e n if left < n : S . append ( \"(\" ) # \u505a\u9009\u62e9 backtrack ( S , left + 1 , right ) S . pop () # \u64a4\u9500\u9009\u62e9 # \u53f3\u62ec\u53f7\u6570\u91cf\u5c0f\u4e8e\u5de6\u62ec\u53f7\u7684\u6570\u91cf if right < left : S . append ( \")\" ) backtrack ( S , left , right + 1 ) S . pop () # \u526a\u679d # if right < left: # return backtrack ([], 0 , 0 ) return ans \u793a\u4f8b2\uff0c 46. \u5168\u6392\u5217 \u53c2\u8003 \u00b6 DFS \u3001\u52a8\u6001\u89c4\u5212\u3001\u56de\u6eaf\u6cd5\u3001\u9012\u5f52\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u4ec0\u4e48\uff1f - Jerron\u7684\u56de\u7b54 - \u77e5\u4e4e \u56de\u6eaf\u6cd5\u5957\u8def\u6a21\u677f \u5237\u901aleetcode - Tachibana Kanade\u7684\u6587\u7ae0 LeetCode--\u56de\u6eaf\u6cd5\u5fc3\u5f97 - James Ken\u7684\u6587\u7ae0 \u56de\u6eaf\u7b97\u6cd5\u5165\u95e8\u7ea7\u8be6\u89e3 + \u7ec3\u4e60\uff08\u6301\u7eed\u66f4\u65b0\uff09- liweiw 22 \u62ec\u53f7\u751f\u6210\u9898\u89e3 \u56de\u6eaf\u7b97\u6cd5\u8be6\u89e3 - labuladong","title":"\u56de\u6eaf"},{"location":"10.Backtracking/Backtracking_zh/#_1","text":"English","title":"\u56de\u6eaf"},{"location":"10.Backtracking/Backtracking_zh/#_2","text":"\u56de\u6eaf\u5206\u6b65\u8bd5\u63a2\u6bcf\u79cd\u53ef\u80fd\u6027\uff0c\u5982\u679c\u5f53\u524d\u4e0d\u662f\u76ee\u6807\uff0c\u5219\u9000\u56de\u4e0a\u4e00\u6b65\u5c1d\u8bd5\u5176\u4ed6\u53ef\u80fd\uff0c\u56e0\u4e3a\u5927\u591a\u65f6\u5019\u6bcf\u4e00\u6b65\u7684\u5904\u7406\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u7528\u9012\u5f52\u6765\u89e3\u51b3\uff0c\u4e00\u4e2a\u9012\u5f52\u7b97\u6cd5\u4e00\u5b9a\u8981\u6709\u51fa\u53e3\uff0c\u56de\u6eaf\u4f5c\u7528\u5230\u6811\u65f6\u5c31\u662f\u7c7b\u4f3c DFS\uff0c\u51e0\u4e4e\u6240\u6709\u53ef\u4ee5\u7528\u56de\u6eaf\u89e3\u51b3\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u8868\u793a\u4e3a\u6811\u3002 \u5178\u578b\u95ee\u9898\u6709 \u6392\u5217\u3001\u7ec4\u5408\uff08\u5b50\u96c6\u3001\u5e42\u96c6\u3001\u5b57\u7b26\u5168\u6392\u5217\uff09\u3002 \u5728\u4f20\u503c\u65f6\uff0c\u5bf9\u4e8e\u6392\u5217\u95ee\u9898\uff0c\u662f\u8981\u5220\u6389\u5355\u4e2a\u7528\u8fc7\u7684\u5143\u7d20\uff1b\u7ec4\u5408\u95ee\u9898\uff0c\u662f\u5220\u6389\u524d\u9762\u6240\u6709\u7684\u5143\u7d20 \u6570\u7ec4\u3001\u5b57\u7b26\u4e32\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u7279\u5b9a\u7684\u89c4\u5219\uff0c\u5c1d\u8bd5\u641c\u7d22\u8fed\u4ee3\u627e\u5230\u67d0\u4e2a\u89e3 \u4e8c\u7ef4\u6570\u7ec4\u4e0b\u7684 DFS","title":"\u6982\u5ff5"},{"location":"10.Backtracking/Backtracking_zh/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 res = [] # \u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\u4fdd\u5b58\u6700\u7ec8\u7ed3\u679c state = [] # \u5b9a\u4e49\u72b6\u6001\u53d8\u91cf\u4fdd\u5b58\u5f53\u524d\u72b6\u6001\uff0c\u72b6\u6001\u53d8\u91cf\uff08state\uff09\u5c31\u662f\u6700\u540e\u7ed3\u679c\uff08result\uff09\u8981\u4fdd\u5b58\u7684\u503c p , q , r # \u5b9a\u4e49\u6761\u4ef6\u53d8\u91cf\uff08\u4e00\u822c\u6761\u4ef6\u53d8\u91cf\u5c31\u662f\u9898\u76ee\u76f4\u63a5\u7ed9\u7684\u53c2\u6570\uff09\uff0c\u6761\u4ef6\u53d8\u91cf\u5c31\u662f\u51b3\u5b9a\u641c\u7d22\u662f\u5426\u5b8c\u6bd5\u6216\u8005\u5408\u6cd5\u7684\u503c def backtrack ( \u72b6\u6001 \uff0c \u6761\u4ef61 \uff0c \u6761\u4ef62 \uff0c ... ): if # \u4e0d\u6ee1\u8db3\u5408\u6cd5\u6761\u4ef6\uff08\u53ef\u4ee5\u8bf4\u662f\u526a\u679d\uff09\uff0c\u641c\u7d22\u5931\u8d25\u5e76\u8fd4\u56de\u4e0a\u4e00\u6b21\u72b6\u6001 return elif # \u72b6\u6001\u6ee1\u8db3\u6700\u7ec8\u8981\u6c42\uff0c\u641c\u7d22\u6210\u529f\u5e76\u4fdd\u5b58\u7ed3\u679c res . append ( state ) return # \u4e3b\u8981\u9012\u5f52\u8fc7\u7a0b\uff0c\u4e00\u822c\u662f\u5e26\u6709 \u5faa\u73af\u4f53 \u6216\u8005 \u6761\u4ef6\u4f53\uff0c\u4f20\u9012\u5f53\u524d\u72b6\u6001\u7ed9\u4e0b\u4e00\u6b21\u9012\u5f52\u8fdb\u884c\u641c\u7d22\u3002\u9009\u62e9\u5217\u8868 for / if # \u6ee1\u8db3\u6267\u884c\u6761\u4ef6 do # \u505a\u9009\u62e9 backtrack ( \u72b6\u6001 \uff0c \u6761\u4ef61 \uff0c \u6761\u4ef62 \uff0c ... ) undo # \u64a4\u9500\u9009\u62e9 backtrack ( \u72b6\u6001 \uff0c \u6761\u4ef61 \uff0c \u6761\u4ef62 \uff0c ... ) return res \u793a\u4f8b1\uff0c 22. \u62ec\u53f7\u751f\u6210 \uff0c\u7ed9\u4e00\u4e2a\u6570\u5b57 n\uff0c\u751f\u6210 n \u5bf9\u62ec\u53f7\u7684\u6240\u6709\u5339\u914d \u4e00\u4e2a\u6811\u5f62\u7ed3\u6784\uff0c\u4ece\u6839\u8282\u70b9\u51fa\u53d1\uff0c\u7528\u6808\u6765\u7ba1\u7406\u8def\u5f84\u4e0a\u7684\u62ec\u53f7\uff0c\u5de6\u62ec\u53f7\u6570\u91cf < \u53f3\u62ec\u53f7\u7684\u65f6\u5019\uff0c\u526a\u679d \u901a\u8fc7 debug \u53ef\u4ee5\u89c2\u5bdf\u5230 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def generateParenthesis ( self , n : int ) -> List [ str ]: ans = [] def backtrack ( S , left , right ): # \u7ed3\u675f\u6761\u4ef6\uff0c\u62ec\u5f27\u5168\u90e8\u7528\u5b8c\u4e86 if len ( S ) == 2 * n : ans . append ( \"\" . join ( S )) return # \u5de6\u62ec\u53f7\u6570\u91cf\u4e0d\u5927\u4e8e n if left < n : S . append ( \"(\" ) # \u505a\u9009\u62e9 backtrack ( S , left + 1 , right ) S . pop () # \u64a4\u9500\u9009\u62e9 # \u53f3\u62ec\u53f7\u6570\u91cf\u5c0f\u4e8e\u5de6\u62ec\u53f7\u7684\u6570\u91cf if right < left : S . append ( \")\" ) backtrack ( S , left , right + 1 ) S . pop () # \u526a\u679d # if right < left: # return backtrack ([], 0 , 0 ) return ans \u793a\u4f8b2\uff0c 46. \u5168\u6392\u5217","title":"\u6a21\u7248 &amp; \u57fa\u672c\u64cd\u4f5c"},{"location":"10.Backtracking/Backtracking_zh/#_4","text":"DFS \u3001\u52a8\u6001\u89c4\u5212\u3001\u56de\u6eaf\u6cd5\u3001\u9012\u5f52\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u4ec0\u4e48\uff1f - Jerron\u7684\u56de\u7b54 - \u77e5\u4e4e \u56de\u6eaf\u6cd5\u5957\u8def\u6a21\u677f \u5237\u901aleetcode - Tachibana Kanade\u7684\u6587\u7ae0 LeetCode--\u56de\u6eaf\u6cd5\u5fc3\u5f97 - James Ken\u7684\u6587\u7ae0 \u56de\u6eaf\u7b97\u6cd5\u5165\u95e8\u7ea7\u8be6\u89e3 + \u7ec3\u4e60\uff08\u6301\u7eed\u66f4\u65b0\uff09- liweiw 22 \u62ec\u53f7\u751f\u6210\u9898\u89e3 \u56de\u6eaf\u7b97\u6cd5\u8be6\u89e3 - labuladong","title":"\u53c2\u8003"},{"location":"11.Graphs/133.clone-graph/","text":"","title":"133.clone graph"},{"location":"11.Graphs/200.number-of-islands/","text":"200. Number of Islands 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution : def dfs ( self , grid , r , c ): grid [ r ][ c ] = 0 nr , nc = len ( grid ), len ( grid [ 0 ]) for x , y in [( r - 1 , c ), ( r + 1 , c ), ( r , c - 1 ), ( r , c + 1 )]: if 0 <= x < nr and 0 <= y < nc and grid [ x ][ y ] == \"1\" : # if land, recursive dfs search self . dfs ( grid , x , y ) def numIslands ( self , grid : List [ List [ str ]]) -> int : nr = len ( grid ) if nr == 0 : return 0 nc = len ( grid [ 0 ]) num_islands = 0 for r in range ( nr ): for c in range ( nc ): if grid [ r ][ c ] == \"1\" : num_islands += 1 # if land, dfs search self . dfs ( grid , r , c ) return num_islands","title":"200.number of islands"},{"location":"11.Graphs/207.course-schedule/","text":"","title":"207.course schedule"},{"location":"11.Graphs/269.alien-dictionary/","text":"","title":"269.alien dictionary"},{"location":"11.Graphs/323.number-of-connected-components-in-an-undirected-graph/","text":"Number of Connected Components in an Undirected Graph \u65e0\u5411\u56fe\u4e2d\u8fde\u901a\u5206\u91cf\u7684\u6570\u76ee","title":"323.number of connected components in an undirected graph"},{"location":"11.Graphs/399.evaluate-division/","text":"equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 class UnionFind : def __init__ ( self ): \"\"\" \u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9 \u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u6743\u91cd \"\"\" self . father = {} self . value = {} def find ( self , x ): \"\"\" \u67e5\u627e\u6839\u8282\u70b9 \u8def\u5f84\u538b\u7f29 \u66f4\u65b0\u6743\u91cd \"\"\" root = x # \u8282\u70b9\u66f4\u65b0\u6743\u91cd\u7684\u65f6\u5019\u8981\u653e\u5927\u7684\u500d\u6570 base = 1 while self . father [ root ] != None : root = self . father [ root ] base *= self . value [ root ] while x != root : original_father = self . father [ x ] ##### \u79bb\u6839\u8282\u70b9\u8d8a\u8fdc\uff0c\u653e\u5927\u7684\u500d\u6570\u8d8a\u9ad8 self . value [ x ] *= base base /= self . value [ original_father ] ##### self . father [ x ] = root x = original_father return root def merge ( self , x , y , val ): \"\"\" \u5408\u5e76\u4e24\u4e2a\u8282\u70b9 \"\"\" root_x , root_y = self . find ( x ), self . find ( y ) if root_x != root_y : self . father [ root_x ] = root_y ##### \u56db\u8fb9\u5f62\u6cd5\u5219\u66f4\u65b0\u6839\u8282\u70b9\u7684\u6743\u91cd self . value [ root_x ] = self . value [ y ] * val / self . value [ x ] def is_connected ( self , x , y ): \"\"\" \u4e24\u8282\u70b9\u662f\u5426\u76f8\u8fde \"\"\" return x in self . value and y in self . value and self . find ( x ) == self . find ( y ) def add ( self , x ): \"\"\" \u6dfb\u52a0\u65b0\u8282\u70b9, \u521d\u59cb\u5316\u6743\u91cd\u4e3a1.0 \"\"\" if x not in self . father : self . father [ x ] = None self . value [ x ] = 1.0 class Solution : def calcEquation ( self , equations : List [ List [ str ]], values : List [ float ], queries : List [ List [ str ]] ) -> List [ float ]: uf = UnionFind () for ( a , b ), val in zip ( equations , values ): uf . add ( a ) uf . add ( b ) uf . merge ( a , b , val ) res = [ - 1.0 ] * len ( queries ) for i , ( a , b ) in enumerate ( queries ): if uf . is_connected ( a , b ): res [ i ] = uf . value [ a ] / uf . value [ b ] return res","title":"399.evaluate division"},{"location":"11.Graphs/417.pacific-atlantic-water-flow/","text":"","title":"417.pacific atlantic water flow"},{"location":"11.Graphs/Graphs/","text":"","title":"Graphs"},{"location":"11.Graphs/Graphs_zh/","text":"\u56fe \u00b6 \u6982\u5ff5 \u00b6 \u6a21\u7248 & \u57fa\u672c\u64cd\u4f5c \u00b6 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 & \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 & \u5e76\u67e5\u96c6 & \u62d3\u6251\u6392\u5e8f \u00b6 \u5bf9\u6bd4 DFS \u548c BFS\uff1a \u6bd4\u5982 leetcode 1293 \u6709\u969c\u788d\u7269\u7684\u4e8c\u7ef4\u7f51\u683c\u4e2d\u5bfb\u627e\u6700\u77ed\u8def\u5f84\uff0cBFS \u9010\u5c42\u5411\u5916\u6269\u5c55\u7684\u641c\u7d22\u53ef\u4ee5\u66f4\u65e9\u7684\u9047\u89c1\u969c\u788d\uff0c\u63d0\u524d\u8fd4\u56de\u3002 Union Find \u5e76\u67e5\u96c6 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 class UnionFind : def __init__ ( self ): \"\"\" \u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9 \"\"\" self . father = {} def find ( self , x ): \"\"\" \u67e5\u627e\u6839\u8282\u70b9 \u8def\u5f84\u538b\u7f29 \"\"\" root = x while self . father [ root ] != None : root = self . father [ root ] # \u8def\u5f84\u538b\u7f29 while x != root : original_father = self . father [ x ] self . father [ x ] = root x = original_father return root def merge ( self , x , y , val ): \"\"\" \u5408\u5e76\u4e24\u4e2a\u8282\u70b9 \"\"\" root_x , root_y = self . find ( x ), self . find ( y ) if root_x != root_y : self . father [ root_x ] = root_y def is_connected ( self , x , y ): \"\"\" \u5224\u65ad\u4e24\u8282\u70b9\u662f\u5426\u76f8\u8fde \"\"\" return self . find ( x ) == self . find ( y ) def add ( self , x ): \"\"\" \u6dfb\u52a0\u65b0\u8282\u70b9 \"\"\" if x not in self . father : self . father [ x ] = None \u62d3\u6251\u6392\u5e8f \u00b6 \u62d3\u6251\u6392\u5e8f\u6709\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a \\(O(V+E)\\) \uff0c\u5206\u522b\u662f \u5165\u5ea6\u8868 \uff1a\u7ef4\u62a4\u4e00\u4e2a\u5165\u5ea6\u4e3a 0 \u7684\u9876\u70b9\u7684\u96c6\u5408 \u4ece DAG (directed acyclic graph) \u56fe\u4e2d\u9009\u62e9\u4e00\u4e2a\u6ca1\u6709\u524d\u9a71\uff08\u5373\u5165\u5ea6\u4e3a 0\uff09\u7684\u9876\u70b9\u5e76\u8f93\u51fa \u4ece\u56fe\u4e2d\u5220\u9664\u8be5\u9876\u70b9\u548c\u6240\u6709\u4ee5\u5b83\u4e3a\u8d77\u70b9\u7684\u6709\u5411\u8fb9 \u91cd\u590d 1, 2 \u76f4\u5230\u5f53\u524d\u7684 DAG \u56fe\u4e3a\u7a7a\u6216\u5f53\u524d\u56fe\u4e2d\u4e0d\u5b58\u5728\u65e0\u524d\u9a71\u7684\u9876\u70b9\u4e3a\u6b62\uff0c\u540e\u4e00\u79cd\u60c5\u51b5\u8bf4\u660e\u6709\u5411\u56fe\u4e2d\u5fc5\u7136\u5b58\u5728\u73af \u7b97\u6cd5\u53ef\u89c6\u5316 https://www.cs.usfca.edu/~galles/visualization/TopoSortIndegree.html DFS \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 \u53c2\u8003 \u00b6","title":"\u56fe"},{"location":"11.Graphs/Graphs_zh/#_1","text":"","title":"\u56fe"},{"location":"11.Graphs/Graphs_zh/#_2","text":"","title":"\u6982\u5ff5"},{"location":"11.Graphs/Graphs_zh/#_3","text":"","title":"\u6a21\u7248 &amp; \u57fa\u672c\u64cd\u4f5c"},{"location":"11.Graphs/Graphs_zh/#_4","text":"\u5bf9\u6bd4 DFS \u548c BFS\uff1a \u6bd4\u5982 leetcode 1293 \u6709\u969c\u788d\u7269\u7684\u4e8c\u7ef4\u7f51\u683c\u4e2d\u5bfb\u627e\u6700\u77ed\u8def\u5f84\uff0cBFS \u9010\u5c42\u5411\u5916\u6269\u5c55\u7684\u641c\u7d22\u53ef\u4ee5\u66f4\u65e9\u7684\u9047\u89c1\u969c\u788d\uff0c\u63d0\u524d\u8fd4\u56de\u3002","title":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 &amp; \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 &amp; \u5e76\u67e5\u96c6 &amp; \u62d3\u6251\u6392\u5e8f"},{"location":"11.Graphs/Graphs_zh/#union-find","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 class UnionFind : def __init__ ( self ): \"\"\" \u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9 \"\"\" self . father = {} def find ( self , x ): \"\"\" \u67e5\u627e\u6839\u8282\u70b9 \u8def\u5f84\u538b\u7f29 \"\"\" root = x while self . father [ root ] != None : root = self . father [ root ] # \u8def\u5f84\u538b\u7f29 while x != root : original_father = self . father [ x ] self . father [ x ] = root x = original_father return root def merge ( self , x , y , val ): \"\"\" \u5408\u5e76\u4e24\u4e2a\u8282\u70b9 \"\"\" root_x , root_y = self . find ( x ), self . find ( y ) if root_x != root_y : self . father [ root_x ] = root_y def is_connected ( self , x , y ): \"\"\" \u5224\u65ad\u4e24\u8282\u70b9\u662f\u5426\u76f8\u8fde \"\"\" return self . find ( x ) == self . find ( y ) def add ( self , x ): \"\"\" \u6dfb\u52a0\u65b0\u8282\u70b9 \"\"\" if x not in self . father : self . father [ x ] = None","title":"Union Find \u5e76\u67e5\u96c6"},{"location":"11.Graphs/Graphs_zh/#_5","text":"\u62d3\u6251\u6392\u5e8f\u6709\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a \\(O(V+E)\\) \uff0c\u5206\u522b\u662f \u5165\u5ea6\u8868 \uff1a\u7ef4\u62a4\u4e00\u4e2a\u5165\u5ea6\u4e3a 0 \u7684\u9876\u70b9\u7684\u96c6\u5408 \u4ece DAG (directed acyclic graph) \u56fe\u4e2d\u9009\u62e9\u4e00\u4e2a\u6ca1\u6709\u524d\u9a71\uff08\u5373\u5165\u5ea6\u4e3a 0\uff09\u7684\u9876\u70b9\u5e76\u8f93\u51fa \u4ece\u56fe\u4e2d\u5220\u9664\u8be5\u9876\u70b9\u548c\u6240\u6709\u4ee5\u5b83\u4e3a\u8d77\u70b9\u7684\u6709\u5411\u8fb9 \u91cd\u590d 1, 2 \u76f4\u5230\u5f53\u524d\u7684 DAG \u56fe\u4e3a\u7a7a\u6216\u5f53\u524d\u56fe\u4e2d\u4e0d\u5b58\u5728\u65e0\u524d\u9a71\u7684\u9876\u70b9\u4e3a\u6b62\uff0c\u540e\u4e00\u79cd\u60c5\u51b5\u8bf4\u660e\u6709\u5411\u56fe\u4e2d\u5fc5\u7136\u5b58\u5728\u73af \u7b97\u6cd5\u53ef\u89c6\u5316 https://www.cs.usfca.edu/~galles/visualization/TopoSortIndegree.html DFS \u6df1\u5ea6\u4f18\u5148\u641c\u7d22","title":"\u62d3\u6251\u6392\u5e8f"},{"location":"11.Graphs/Graphs_zh/#_6","text":"","title":"\u53c2\u8003"},{"location":"12.Dynamic-Programming/Dynamic-Programming/","text":"What is dynamic programming? \u00b6 Simple Story https://qr.ae/pNdot8, repeating subproblems. https://www.zhihu.com/question/23995189/answer/613096905, Detailed explanation(Chinese). \u52a8\u6001\u89c4\u5212\u95ee\u9898\u601d\u8003\u65b9\u5411 , Problem solving ideas(Chinese). all in all. Change space for time, use one-dimensional and multi-dimensional arrays to record states Concept \u00b6 post-invalidity \u65e0\u540e\u6548\u6027\uff1a\u5982\u679c\u7ed9\u5b9a\u67d0\u4e00\u9636\u6bb5\u7684\u72b6\u6001\uff0c\u5219\u5728\u8fd9\u4e00\u9636\u6bb5\u4ee5\u540e\u8fc7\u7a0b\u7684\u53d1\u5c55\u4e0d\u53d7\u8fd9\u9636\u6bb5\u4ee5\u524d\u5404\u6bb5\u72b6\u6001\u7684\u5f71\u54cd\u3002 optimal substructure \u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u5927\u95ee\u9898\u7684\u6700\u4f18\u89e3\u53ef\u4ee5\u7531\u5c0f\u95ee\u9898\u7684\u6700\u4f18\u89e3\u63a8\u51fa\u3002 \u80fd\u62c6\u5206\u6210\u5b50\u95ee\u9898\u4e14\u7b26\u5408\u4e0a\u8ff0 2 \u4e2a\u6761\u4ef6\uff0c\u5c31\u53ef\u4ee5\u7528 DP \u89e3\u51b3\u95ee\u9898\u3002 top-down with memoization \u5e26\u5907\u5fd8\u7684\u81ea\u9876\u5411\u4e0b vs bottom-up method \u81ea\u5e95\u5411\u4e0a\u6cd5\uff0c\u4e3a\u4ec0\u4e48 DP \u901a\u5e38\u8981\u5012\u63a8\uff1f\u56e0\u4e3a \u521d\u6001\uff08\u8d77\u70b9\uff09\u552f\u4e00\uff0c\u76ee\u6807\u72b6\u6001\uff08\u7ec8\u70b9\uff09\u4e0d\u552f\u4e00\u3002 https://www.zhihu.com/question/464263211/answer/1940236681 Space optimization \u00b6 Scrolling array ideas, variables instead of arrays, such as 152. Maximum Product Subarray Two-dimensional to one-dimensional, one-dimensional to 2 var. Problem solving steps \u00b6 Why DP? \u00b6 \u65e2\u7136 DP \u662f\u901a\u8fc7\u5b50\u95ee\u9898\u4f18\u5316 transition function Simple Story https://qr.ae/pNdot8, repeating subproblems https://www.zhihu.com/question/23995189/answer/613096905","title":"What is dynamic programming?"},{"location":"12.Dynamic-Programming/Dynamic-Programming/#what-is-dynamic-programming","text":"Simple Story https://qr.ae/pNdot8, repeating subproblems. https://www.zhihu.com/question/23995189/answer/613096905, Detailed explanation(Chinese). \u52a8\u6001\u89c4\u5212\u95ee\u9898\u601d\u8003\u65b9\u5411 , Problem solving ideas(Chinese). all in all. Change space for time, use one-dimensional and multi-dimensional arrays to record states","title":"What is dynamic programming?"},{"location":"12.Dynamic-Programming/Dynamic-Programming/#concept","text":"post-invalidity \u65e0\u540e\u6548\u6027\uff1a\u5982\u679c\u7ed9\u5b9a\u67d0\u4e00\u9636\u6bb5\u7684\u72b6\u6001\uff0c\u5219\u5728\u8fd9\u4e00\u9636\u6bb5\u4ee5\u540e\u8fc7\u7a0b\u7684\u53d1\u5c55\u4e0d\u53d7\u8fd9\u9636\u6bb5\u4ee5\u524d\u5404\u6bb5\u72b6\u6001\u7684\u5f71\u54cd\u3002 optimal substructure \u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u5927\u95ee\u9898\u7684\u6700\u4f18\u89e3\u53ef\u4ee5\u7531\u5c0f\u95ee\u9898\u7684\u6700\u4f18\u89e3\u63a8\u51fa\u3002 \u80fd\u62c6\u5206\u6210\u5b50\u95ee\u9898\u4e14\u7b26\u5408\u4e0a\u8ff0 2 \u4e2a\u6761\u4ef6\uff0c\u5c31\u53ef\u4ee5\u7528 DP \u89e3\u51b3\u95ee\u9898\u3002 top-down with memoization \u5e26\u5907\u5fd8\u7684\u81ea\u9876\u5411\u4e0b vs bottom-up method \u81ea\u5e95\u5411\u4e0a\u6cd5\uff0c\u4e3a\u4ec0\u4e48 DP \u901a\u5e38\u8981\u5012\u63a8\uff1f\u56e0\u4e3a \u521d\u6001\uff08\u8d77\u70b9\uff09\u552f\u4e00\uff0c\u76ee\u6807\u72b6\u6001\uff08\u7ec8\u70b9\uff09\u4e0d\u552f\u4e00\u3002 https://www.zhihu.com/question/464263211/answer/1940236681","title":"Concept"},{"location":"12.Dynamic-Programming/Dynamic-Programming/#space-optimization","text":"Scrolling array ideas, variables instead of arrays, such as 152. Maximum Product Subarray Two-dimensional to one-dimensional, one-dimensional to 2 var.","title":"Space optimization"},{"location":"12.Dynamic-Programming/Dynamic-Programming/#problem-solving-steps","text":"","title":"Problem solving steps"},{"location":"12.Dynamic-Programming/Dynamic-Programming/#why-dp","text":"\u65e2\u7136 DP \u662f\u901a\u8fc7\u5b50\u95ee\u9898\u4f18\u5316 transition function Simple Story https://qr.ae/pNdot8, repeating subproblems https://www.zhihu.com/question/23995189/answer/613096905","title":"Why DP?"},{"location":"12.Dynamic-Programming/Dynamic-Programming_zh/","text":"\u52a8\u6001\u89c4\u5212 \u00b6","title":"\u52a8\u6001\u89c4\u5212"},{"location":"12.Dynamic-Programming/Dynamic-Programming_zh/#_1","text":"","title":"\u52a8\u6001\u89c4\u5212"},{"location":"13.Greedy/55.jump-game/","text":"","title":"55.jump game"},{"location":"14.Intervals/253.meeting-rooms-ii/","text":"","title":"253.meeting rooms ii"},{"location":"14.Intervals/435.non-overlapping-intervals/","text":"","title":"435.non overlapping intervals"},{"location":"14.Intervals/56.merge-intervals/","text":"","title":"56.merge intervals"},{"location":"14.Intervals/57.insert-interval/","text":"","title":"57.insert interval"},{"location":"15.Math-and-Geometry/48.rotate-image/","text":"","title":"48.rotate image"},{"location":"15.Math-and-Geometry/54.spiral-matrix/","text":"","title":"54.spiral matrix"},{"location":"15.Math-and-Geometry/73.set-matrix-zeroes/","text":"","title":"73.set matrix zeroes"},{"location":"16.Bit-Manipulation/371.sum-of-two-integers/","text":"","title":"371.sum of two integers"}]}